/*
Navicat MySQL Data Transfer

Source Server         : localhost_3306
Source Server Version : 50624
Source Host           : localhost:3306
Source Database       : testtpl

Target Server Type    : MYSQL
Target Server Version : 50624
File Encoding         : 65001

Date: 2016-02-15 11:28:29
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for admin
-- ----------------------------
DROP TABLE IF EXISTS `admin`;
CREATE TABLE `admin` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(64) NOT NULL COMMENT '用户名',
  `email` varchar(256) NOT NULL COMMENT '登陆邮箱',
  `password` varchar(256) NOT NULL COMMENT '登陆密码',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of admin
-- ----------------------------
INSERT INTO `admin` VALUES ('1', 'chrisdowson', 'chrisdowson@163.com', 'e10adc3949ba59abbe56e057f20f883e');

-- ----------------------------
-- Table structure for feedback
-- ----------------------------
DROP TABLE IF EXISTS `feedback`;
CREATE TABLE `feedback` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(255) DEFAULT NULL COMMENT '用户名',
  `content` varchar(255) DEFAULT NULL COMMENT '反馈内容',
  `ctime` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of feedback
-- ----------------------------
INSERT INTO `feedback` VALUES ('1', 'chrisdowson', '啊死大叔大叔大叔', '2015-12-09 11:30:56');
INSERT INTO `feedback` VALUES ('2', 'chrisdowson', '啊死大叔大叔大叔', '2015-12-09 11:31:34');
INSERT INTO `feedback` VALUES ('3', 'chrisdowson', '大师的撒的撒的', '2015-12-09 13:53:32');
INSERT INTO `feedback` VALUES ('4', 'chrisdowson', 'wqewewew', '2016-02-15 11:01:24');
INSERT INTO `feedback` VALUES ('5', '匿名用户', 'dadadada', '2016-02-15 11:01:50');

-- ----------------------------
-- Table structure for problems
-- ----------------------------
DROP TABLE IF EXISTS `problems`;
CREATE TABLE `problems` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(1000) DEFAULT NULL COMMENT '问题描述',
  `description` varchar(2000) NOT NULL COMMENT '问题的详细描述',
  `type` tinyint(1) NOT NULL COMMENT '问题类型：1.单选题，2.填空题，3.简答题，4.多选题',
  `difficulty` tinyint(2) NOT NULL COMMENT '问题难度：1-10依次增加',
  `category` tinyint(1) NOT NULL COMMENT '问题分类：1.前端，2.php语法，3.mysql，4.linux，5.算法，6.设计模式',
  `options` varchar(2000) NOT NULL COMMENT '选择题时的可选选项(json格式)',
  `answer` varchar(2000) NOT NULL COMMENT '选择题的答案是json数据，填空题是字符',
  `answer_des` varchar(2000) DEFAULT NULL COMMENT '答案描述',
  `is_show` tinyint(4) NOT NULL COMMENT '是否显示',
  `ctime` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=290 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of problems
-- ----------------------------
INSERT INTO `problems` VALUES ('4', '如何产生带有数字列表符号的列表？（）', '', '1', '1', '1', '[\"&lt;ul&gt;\",\"&lt;dl&gt;\",\"&lt;ol&gt;\",\"&lt;list&gt;\"]', '2', '答案：C', '1', '2015-12-22 10:24:23');
INSERT INTO `problems` VALUES ('5', '如何显示没有下划线的超链接（）', '', '1', '1', '1', '[\"a {text-decoration:none}\",\"a {text-decoration:no underline}\",\"a {underline:none}\",\"a {decoration:no underline}\"]', '0', '', '1', '2015-12-22 10:42:40');
INSERT INTO `problems` VALUES ('6', '一下XHTML代码片段不符合W3C规范，请指出错误之处', '&amp;lt;div id=&quot;newsmore&quot;&amp;gt;&amp;lt;ul class=&quot;newsmore&quot;&amp;gt;&lt;span style=&quot;line-height:1.5;&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;img src=&quot;image.png&quot;&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;', '3', '3', '1', '[\"\"]', '&lt;span&gt;id属性重复了，img标签木有关闭&lt;/span&gt;', '', '1', '2015-12-23 09:43:15');
INSERT INTO `problems` VALUES ('7', '请描述出两点以上XHTML和HTML最显著的区别', '&lt;p class=&quot;NewStyle17&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '3', '3', '1', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	&lt;p class=&quot;NewStyle17&quot; style=&quot;text-align:justify;&quot;&gt;\r\n		(1).XHTML必须强制指定文档类型DocType,&amp;nbsp;HTML不需要\r\n	&lt;/p&gt;\r\n	&lt;p class=&quot;NewStyle17&quot; st', '&lt;p class=&quot;NewStyle17&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '1', '2015-12-23 09:53:26');
INSERT INTO `problems` VALUES ('8', '请问，div和span,p标签三者间的区别', '', '3', '3', '1', '[\"\"]', '&lt;span&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:28.0000pt;text-align:justify;&quot;&gt;\r\n	从语义化的角度来讲，div和span标签对于它们包含的元素是没有意义的，而p标签则是一个语义化标签，表示一个段落。所以div和span&amp;nbsp;—般是用来布局。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:28.0000pt;text-align:justify;&quot;&gt;\r\n	从显示的角度来讲，span是内联的，用在一小块的内联HTML中，前后不断行，div元素是块级的，等同于其前后有断行，P元素是块级的，前后断行，而且还要再隔一行，相当于断两行。\r\n&lt;/p&gt;\r\n&lt;/span&gt;', '', '1', '2015-12-23 09:57:29');
INSERT INTO `problems` VALUES ('9', 'CSS中class和id的区别', '', '3', '3', '1', '[\"\"]', '&lt;span&gt;id:每个页ID是唯一的不能重复。&amp;nbsp;class:可以设置多个class为同一个值。&lt;/span&gt;', '&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '1', '2015-12-23 09:58:35');
INSERT INTO `problems` VALUES ('10', '请列举几个meta元素', '', '3', '3', '1', '[\"\"]', '&lt;p class=&quot;NewStyle21&quot;&gt;\r\n	&lt;span style=&quot;line-height:1.5;&quot;&gt;&amp;lt;meta name=&quot;keywords&quot; content=&quot;&quot;&amp;gt; //向搜索引擎说明你的网页的关键词&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle21&quot;&gt;\r\n	&amp;lt;meta name=&quot;description&quot; content=&quot;&quot;&amp;gt; //告诉搜索引擎你的站点的主要内容&lt;br /&gt;\r\n&amp;lt;meta name=&quot;author&quot; content=&quot;你的姓名&quot;&amp;gt; //告诉搜索引擎你的站点的制作的作者&lt;br /&gt;\r\n&amp;lt;meta http-equiv=&quot;Content-Typc&quot; content=&quot;text/html;charset=utf-8&quot;&amp;gt; //指定字符集&amp;nbsp;&lt;br /&gt;\r\n&amp;lt;meta http-equiv=&quot;refreshM content=&quot;n;url=&quot;&amp;gt;//定时让网页在指定的时间 n 内跳转&amp;nbsp;&lt;br /&gt;\r\n&amp;lt;meta http-equiv=&quot;expircs&quot; content=&quot;Mon，12 May 2001 00:20:00 GMT&quot;&amp;gt; //可以用设定网页的到期时间，一旦过期则必须到服务器上重新调用。需要注意的是必须使用GMT时间 格式&lt;br /&gt;\r\n&amp;lt;meta http-equiv=“pragma&quot; content=&quot;no-cache&quot;&amp;gt;&lt;br /&gt;\r\n&amp;lt;meta http-equiv=&quot;set-cookie&quot; content=&quot;Mon，12 May 2001 00:20:00 GMT&quot;&amp;gt; //cookie 设定， 如果网页过期，存盘的cookie将被删除。需要注意的是必须使用GMT时间格式\r\n&lt;/p&gt;', '&lt;p class=&quot;NewStyle21&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '1', '2015-12-23 10:13:39');
INSERT INTO `problems` VALUES ('11', '怪异模式和XHTML模式下IE的宽的区别', '&lt;span&gt;所谓的标准模式是指，浏览器按W3C标准解析执行代码；怪异模式则是使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式不一样，所以我们称之为怪异模式浏览器解析时到底使用标准模式还足怪异模式,与你网页中的DTD声明直接相关,DTD&amp;nbsp;声明定义了标准文档的类型（标准模式解析）文档类型，会使浏览器使用相应的方式加载网&amp;nbsp;页并显示，忽略DTD声明，将使网页进入怪异模式(quirks&amp;amp;nb&lt;/span&gt;', '3', '3', '1', '[\"\"]', '&lt;br /&gt;', '&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '1', '2015-12-23 10:16:48');
INSERT INTO `problems` VALUES ('12', '实现框架的标签，使用举例', '', '3', '3', '1', '[\"\"]', '&lt;span&gt;\r\n&lt;p class=&quot;NewStyle16&quot;&gt;\r\n	&amp;lt;frameset&amp;nbsp;cols=&quot;25%,50%,25%,,&amp;gt;&amp;nbsp;&amp;lt;frame&amp;nbsp;src=&quot;frame_a.htm&quot;&amp;nbsp;/&amp;gt;&amp;nbsp;&amp;lt;frame&amp;nbsp;src=&quot;frame_b.htm&quot;&amp;nbsp;/&amp;gt;&amp;nbsp;&amp;lt;frame&amp;nbsp;src=&quot;frame_c.htm&quot;&amp;nbsp;/&amp;gt;&amp;nbsp;&amp;lt;/frameset&amp;gt;\r\n&lt;/p&gt;\r\n&lt;/span&gt;', '&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '1', '2015-12-23 10:17:24');
INSERT INTO `problems` VALUES ('13', '请写出以下 html 标签的含义：Input form script style table b Img ', '', '3', '3', '1', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	&amp;lt;input&amp;gt;标签用于搜集用户信息。根据不同的type属性值，输入字段拥有很多种形式§&amp;nbsp;输入字段可以，文本字段、复选框、掩码后的文本控件、单选按钮、按钮等等。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	&amp;lt;form&amp;gt;标签用于为用户输入创违HTML表单表单能够包含input元素，比如文本&lt;span style=&quot;line-height:1.5;&quot;&gt;字段、复选框、单选框、提交按钮等等。&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	&amp;lt;script&amp;gt;标签用于定义客户端脚本，比如JavaScript。script元素既可以包含脚本语句, 也可以通过src属性指向外部脚本文件。&lt;br /&gt;\r\n&amp;lt;style&amp;gt;标签用于为HTML文档定义样式信息.&lt;br /&gt;\r\n&amp;lt;table&amp;gt;标签定义HTML表格。简单的HTML表格由table元素以及—个或多个tr、 th或td元素组成。&lt;br /&gt;\r\n&amp;lt;b&amp;gt;呈现粗体文本效果。&lt;br /&gt;\r\n&amp;lt;img/&amp;gt;元素向网页中嵌入一幅图像。&lt;br /&gt;\r\n&lt;/p&gt;', '&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '1', '2015-12-23 10:21:06');
INSERT INTO `problems` VALUES ('14', 'JS表单弹出对话框函数是?获得输入焦点函数是？', '', '3', '3', '1', '[\"\"]', '&lt;p class=&quot;NewStyle21&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	弹出对话框函数：alert(),&amp;nbsp;prompt()，confirm()\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	获得输入焦点函数：focus()\r\n&lt;/p&gt;', '&lt;p class=&quot;NewStyle21&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '1', '2015-12-23 10:25:51');
INSERT INTO `problems` VALUES ('15', 'JS的转向函数是?怎么引入一个外部JS文件？', '', '3', '3', '1', '[\"\"]', '&lt;p class=&quot;NewStyle21&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	转向使用&amp;nbsp;window.location.href=?\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	引入外部js使用〈script&amp;nbsp;src=&quot;&quot;/&amp;gt;\r\n&lt;/p&gt;', '&lt;p class=&quot;NewStyle21&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '1', '2015-12-23 10:26:44');
INSERT INTO `problems` VALUES ('16', '解释下面语句的意思：document.form[&quot;formNmae&quot;].submit', '', '3', '3', '1', '[\"\"]', '&lt;span&gt;获取name为formName的表单并将该表单数据提交到服务器。但这行代码是不能运行&amp;nbsp;的，有两处错误，一是通过表单名称来获取表单得到时候，应该写成&amp;nbsp;document.forms[formName’]，提交表单事件使用submit方法，需要加上括号，下面给出简&amp;nbsp;单的示例代码：&lt;/span&gt;', '&lt;p class=&quot;NewStyle19&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '0', '2015-12-23 10:30:35');
INSERT INTO `problems` VALUES ('17', '可以使用哪些方法使用JavaScript向服务器发出请求且不离开当前页面，简单对比各自 的特点（如果存在）', '', '3', '3', '1', '[\"\"]', '&lt;span&gt;使用XMLHttpRequest对象异步请求&lt;/span&gt;', '', '1', '2015-12-23 10:34:16');
INSERT INTO `problems` VALUES ('18', '判断以下代码是否正确，如果有错，请指出错误，如果正确，请指出运行结果', 'var arr = new Array( new Array( 1,2,3,4), new Array(&quot;abc&quot;，&quot;def&quot;, &quot;xyz&quot;)，&lt;br /&gt;\r\n)；&lt;br /&gt;\r\nfor(i = 0; i &amp;lt; arr.length; i++) { document.write(arr[0])&lt;br /&gt;\r\n}&lt;br /&gt;', '3', '3', '1', '[\"\"]', '&lt;span&gt;怀疑这个代码写错了，第二个new array后面的逗号是多余的，如果此处没问题，则代 码是正确的，输出的结果是1,2,3,4 1,2,3,4&lt;br /&gt;\r\n注：arr是一个二维数组，该数组有两个元素，第一个元素是数组[1,2,3,4]，第二个元素 也是一个数组为[&quot;abc&quot;，&quot;def&quot;，&quot;xyz&quot;],for循环语句执行了两次，但都是输出第一个元素，即 数组[1,2,3,4]。&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;\r\n&lt;/span&gt;', '&lt;p class=&quot;NewStyle18&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '1', '2015-12-23 10:37:18');
INSERT INTO `problems` VALUES ('19', '以下哪条JavaScript语句会产生运行错误：', '', '1', '1', '1', '[\"var obj =();\",\"var obj =[];\",\"var obj ={};\",\"var obj =\\/\\/;\"]', '0', '答案：A', '1', '2015-12-23 10:43:19');
INSERT INTO `problems` VALUES ('20', '请选择结果为真的表达式：', '', '1', '1', '1', '[\"null instanceof Object\",\"null === undefined\",\"null == undefined\",\"NaN == NaN \"]', '2', '答案：C', '1', '2015-12-23 10:44:49');
INSERT INTO `problems` VALUES ('21', 'foo对象有att属性，那么获取att属性的值，以下哪些做法是可以的：', '', '1', '1', '1', '[\"foo.att\",\"foo.(&quot;att&quot;)\",\"foo.[&quot;att&quot;]\",\"foo.{&quot;att&quot;}\",\"foo.[&quot;a&quot;+&quot;t&quot;+&quot;t&quot;]\"]', '0,2,4', '', '1', '2015-12-23 10:54:31');
INSERT INTO `problems` VALUES ('22', '如何添加html元素的事件，有几种方法，举例', '', '3', '3', '1', '[\"\"]', '&lt;span style=&quot;line-height:18px;&quot;&gt;(1) 直接作为元素的属性，如&amp;lt;img onclick=&quot;alert(\'hello\');&quot; src=&quot;hello.jpg&quot;&amp;gt;&lt;/span&gt;&lt;br /&gt;\r\n&lt;span style=&quot;line-height:18px;&quot;&gt;(2) 使用DOM 0级事件，简单，兼容性好，如img.onclick = function(){}&lt;/span&gt;&lt;br /&gt;\r\n&lt;span style=&quot;line-height:18px;&quot;&gt;(3)&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;line-height:1.5;&quot;&gt;使用DOM 2级事件，功能更强大，在非正等标准浏览其中，使用addEventListener，在&amp;nbsp;IE浏览器中则使用attachEvent来实现。&lt;/span&gt;', '&lt;p class=&quot;NewStyle20&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '1', '2015-12-23 11:15:18');
INSERT INTO `problems` VALUES ('25', '请使用JavaScript写出三种产生一个image标签的方法(提示：从方法、对象、HTML 角度考虑)', '', '3', '1', '1', '[\"\"]', '&lt;p class=&quot;NewStyle16&quot;&gt;\r\n	&lt;!--[if !supportLists]--&gt;(1)&amp;nbsp;&lt;!--[endif]--&gt;.&amp;nbsp;var&amp;nbsp;img&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Image();\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle16&quot;&gt;\r\n	&lt;!--[if !supportLists]--&gt;(2)&amp;nbsp;&lt;!--[endif]--&gt;.&amp;nbsp;var&amp;nbsp;img&amp;nbsp;=&amp;nbsp;document.createElement(&quot;image&quot;)\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle16&quot;&gt;\r\n	&lt;!--[if !supportLists]--&gt;(3)&amp;nbsp;&lt;!--[endif]--&gt;.&amp;nbsp;img.innerHTML&amp;nbsp;=&amp;nbsp;&quot;&amp;lt;img&amp;nbsp;src=\'xxx.jpg\'&amp;nbsp;/&amp;gt;&quot;\r\n&lt;/p&gt;', '', '1', '2015-12-23 16:58:15');
INSERT INTO `problems` VALUES ('26', 'js中网页前进和后退的代码', '', '3', '1', '1', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:30.0000pt;text-align:justify;&quot;&gt;\r\n	前进：history.forward();或者&amp;nbsp;history.go(l);&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:30.0000pt;text-align:justify;&quot;&gt;\r\n	后退：history.back();或方&amp;nbsp;history.go(-l);\r\n&lt;/p&gt;', '', '1', '2015-12-23 17:02:29');
INSERT INTO `problems` VALUES ('27', '实现点击按钮弹出窗口的代码', '', '3', '1', '1', '[\"\"]', '&lt;p class=&quot;NewStyle19&quot; style=&quot;margin-left:30.0000pt;&quot;&gt;\r\n	document.getElementById(&amp;nbsp;\'button\'&amp;nbsp;).onclick&amp;nbsp;=&amp;nbsp;function(){&amp;nbsp;window.open&amp;nbsp;(\'page.html\');&lt;span style=&quot;line-height:1.5;&quot;&gt;}&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其中，button是按钮的id，page.html是要弹出的窗口页面。\r\n&lt;/p&gt;', '', '1', '2015-12-23 17:18:02');
INSERT INTO `problems` VALUES ('29', ' strlen()与mb_strlen()的作用分别是什么', '', '3', '2', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	strlen和mb_strlen都是用于获取字符串长度的，其中strlen只针对单字节编码字符，&amp;nbsp;也就是说它计算的是字符串的总字节数，如果是多字节编码，如gbk和utf8，使用strlen得&amp;nbsp;到的不是字符的个数，而是该字符的总字节数，可以使用mb_strlen获取其字符个数，使用&amp;nbsp;mb_strlen要注意两点，一是要开启mbstring扩展，二是要指定字符集。\r\n&lt;/p&gt;', '', '1', '2015-12-23 17:22:50');
INSERT INTO `problems` VALUES ('30', '下列哪个函数是用正则表达式将字符串分割到数组中', '', '1', '1', '2', '[\"split\",\"implode\",\"explode\",\"join\"]', '0', '', '1', '2015-12-23 17:24:46');
INSERT INTO `problems` VALUES ('31', '写出下列几个预定义全局变量的作用', '&lt;p class=&quot;NewStyle17&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	$_SERVER[‘DOCUMENT_ROOT’]&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_SERVER[‘HTTP_HOST’]\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_SERVER[‘REMOTE_ADDR’]&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	&amp;nbsp;$_SERVER[‘HTTP_REFERER\']&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_SERVER[‘SERVER_NAME’]&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_FILES&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	S_FILES[‘userfile’][‘name’]\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	$_FILES[‘userfile’][‘type’]\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_FILES[‘userfile’][‘size’]\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_FILES[‘userfile’][‘tmp_name’]\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_FILES[‘userfne’][‘error’]\r\n&lt;/p&gt;', '3', '3', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	$_SERVER[‘DOCUMENT_ROOT’]	//当前运行脚本所在的文档根目录\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_SERVER[‘HTTP_HOST’]&amp;nbsp;//当前请求的Host:头部的内容\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_SERVER[‘REMOTE_ADDR’]&amp;nbsp;//正在浏览当前页面用户的IP地址\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_SERVER[‘HTTP_REFERER\']&amp;nbsp;//链接到当前页面的前一页面的URL地址\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_SERVER[‘SERVER_NAME’]&amp;nbsp;//当前运行脚本所在服务器主机的名称\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_FILES&amp;nbsp;//包含有所有上传的文件信息\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	S_FILES[‘userfile’][‘name’]&amp;nbsp;//客户端机器文件的原名称\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	$_FILES[‘userfile’][‘type’]&amp;nbsp;//文件MIME类型，如果浏览器提供此信息的话，如”image/gif”。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_FILES[‘userfile’][‘size’]&amp;nbsp;//己上传文件的大小，单位为字节\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_FILES[‘userfile’][‘tmp_name’]//文件被上传后在服务端储存的临时文件名&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	$_FILES[‘userfne’][‘error’]&amp;nbsp;//和该文件上传相关的错误代码\r\n&lt;/p&gt;', '', '1', '2015-12-23 17:34:43');
INSERT INTO `problems` VALUES ('32', 'include和require都能把另外一个文件包含到当前文件中，他们有什么区别？ include和 include_once又有什么区别？', '', '3', '3', '2', '[\"\"]', '&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	二者区別只有一个，那就是对包含文件的需求程度，include就是包含，如果被包含的文件不存在的话，那么则会提示一个错误，但是程序会继续执行下去。&lt;span style=&quot;line-height:1.5;&quot;&gt;而require意思是需要，如果被包含文件不存在或者无法打开的时候，则会提示错误，&amp;nbsp;并且会终止程序的执行。&lt;/span&gt;&lt;span style=&quot;line-height:1.5;&quot;&gt;这两种结构除了在如何处理失败之外完全一样。&lt;/span&gt;&lt;span style=&quot;line-height:1.5;&quot;&gt;once的意思是一次，那么include_once和require_once表示只包含一次，避免重复包含。&lt;/span&gt; \r\n&lt;/p&gt;', '', '1', '2015-12-23 17:44:14');
INSERT INTO `problems` VALUES ('33', 'POST和GET传输的数据量最大分别是多少？', '', '3', '2', '7', '[\"\"]', '&lt;p&gt;\r\n	POST根据php.ini的文件配置（默认是8M）\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	GET的话大小限制在2KB\r\n&lt;/p&gt;', '', '1', '2015-12-23 17:58:45');
INSERT INTO `problems` VALUES ('34', '有三个php文件位于同一目录下，内容如下所示，使用浏览器访问c_php,请问是否存 在问题。如果存在问题，请指出修正方法并写出浏览器査看效果，如果不存在问题，请写出浏览器査看效果', '&lt;p class=&quot;NewStyle16&quot;&gt;\r\n	&lt;!--[if !supportLists]--&gt;A.php:\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle16&quot; style=&quot;margin-left:9pt;&quot;&gt;\r\n	&amp;lt;?php&amp;nbsp;function&amp;nbsp;fa()&amp;nbsp;{&amp;nbsp;echo&amp;nbsp;&quot;in&amp;nbsp;Function&amp;nbsp;A\\n&quot;;&amp;nbsp;}?&amp;gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle16&quot;&gt;\r\n	&lt;!--[if !supportLists]--&gt;B.php:\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle16&quot; style=&quot;margin-left:9pt;&quot;&gt;\r\n	&amp;lt;?php&amp;nbsp;include&amp;nbsp;\'a.php\';&amp;nbsp;?&amp;gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle16&quot; style=&quot;margin-left:9pt;&quot;&gt;\r\n	&amp;lt;?php&amp;nbsp;function&amp;nbsp;fb()&amp;nbsp;{&amp;nbsp;fa();&amp;nbsp;echo&amp;nbsp;&quot;in&amp;nbsp;Function&amp;nbsp;B\\n&quot;;&amp;nbsp;}&amp;nbsp;?&amp;gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle16&quot;&gt;\r\n	&lt;!--[if !supportLists]--&gt;C.php:\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle16&quot;&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;lt;?php include\'a.php\';?&amp;gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle16&quot;&gt;\r\n	&amp;nbsp; &amp;nbsp; &amp;lt;?php include\'b.php\';?&amp;gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle16&quot;&gt;\r\n	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;?php fa(); fb();?&amp;gt;&amp;nbsp;\r\n&lt;/p&gt;', '3', '3', '2', '[\"\"]', '答案：存在问题。a.php被包含了两次，导致fa()函数重复定义,使用include_once避免重复包含', '', '1', '2015-12-24 10:17:12');
INSERT INTO `problems` VALUES ('35', 'javascript包含了哪些基本数据类型？', '', '3', '1', '1', '[\"\"]', 'Javascript中包含了5种，分别是Number，String，Boolean，Null和Undefined', '', '1', '2015-12-24 10:38:16');
INSERT INTO `problems` VALUES ('36', 'javascript能否定义二维数组，如果不能该怎么解决？', '', '3', '1', '1', '[\"\"]', 'Javascript不支持二维数组定义，可以用arr[0]=new array();来解决', '', '1', '2015-12-24 10:40:25');
INSERT INTO `problems` VALUES ('37', '请说明php中传值与传引用的区别。什么时候传值什么时候传引用', '', '3', '3', '2', '[\"\"]', '变量默认总是传值赋值。那也就是说，当将一个表达式的值赋予一个变量时，整个原始表达式的值被赋值到目标变量。这意味着，例如，当一个变量的值赋予另外—个变量时，改变其中一个变量的值，将不会影晌到另外一个变量。&lt;br /&gt;\r\nPHP也提供了另外一种方式给变量赋值：引用赋值。这意味着新的变量简单的引用（换言之，“成为其别名”或者“指向”）了原始变量。改动新的变量将影响到原始变量，反之亦然。使用引用赋值，简单地将一个&amp;amp;符兮加到将要赋值的变量前（源变量）。&lt;br /&gt;\r\n对象默认是传引用。&lt;br /&gt;\r\n对于较大的数据，传引用比较好，这样可以节省内存的开销。&lt;br /&gt;', '', '1', '2015-12-24 10:48:26');
INSERT INTO `problems` VALUES ('38', '用PHP写出显示客户端IP与服务器IP的代码', '', '3', '3', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:27.0000pt;&quot;&gt;\r\n	客户端&amp;nbsp;IP:&amp;nbsp;S_SERVER[&quot;REMOTE_ADDR&quot;]\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:27.0000pt;&quot;&gt;\r\n	服务器端&amp;nbsp;IP:&amp;nbsp;$_SERVER[&quot;SERVER_ADDR&quot;]\r\n&lt;/p&gt;', '', '1', '2015-12-24 10:59:16');
INSERT INTO `problems` VALUES ('39', '简述如何得到当前执行脚本路径，包括所得到参数', '', '3', '3', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:27.0000pt;&quot;&gt;\r\n	获取当前执行脚本路径使用$_SERVER[&quot;SCRIPT_FILENAME&quot;]或__FILE__.&amp;nbsp;获取参数，使用$_SERVER[&quot;QUERY_STRING&quot;]\r\n&lt;/p&gt;', '', '1', '2015-12-24 11:01:15');
INSERT INTO `problems` VALUES ('40', 'What is the difference between foo() &amp; @foo()?	', '', '3', '3', '2', '[\"\"]', '&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	foo()会执行这个函式，任何解释错误、语法错误、执行错误都会在页面上显示出来\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	@foo()在执行这个函式时，会隐藏所有上述的错误讯息。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	很多应用程序都使用@mysql_connect()和@mysql_query来隐藏mysql的错误信&amp;nbsp;息，这是不对的，因为错误不该被隐藏，你必须妥善处理它们，可能的话解决它们。\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;', '', '1', '2015-12-24 11:04:02');
INSERT INTO `problems` VALUES ('41', '下面哪个选项没有将John添加到users数组中？', '', '4', '4', '2', '[\"$users[ ] = &quot;john&quot;\",\"array_add($users, &quot;john&quot;)\",\"array_push($users, &quot;john&quot;)\",\"$users ||= &quot;john&quot;\"]', '1,3', '', '1', '2015-12-24 11:09:51');
INSERT INTO `problems` VALUES ('42', '检测一个变量是否有设置的函数是否?是否为空的函数是？', '', '3', '3', '2', '[\"\"]', '&lt;p class=&quot;NewStyle20&quot; style=&quot;margin-left:28pt;&quot;&gt;\r\n	isset检测一个变量足否设置empty检测是否为空\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot; style=&quot;text-indent:28pt;&quot;&gt;\r\n	注意二者的区别，如果变量是非空或非零的值，则empty()返回FALSE。换句话说，&amp;nbsp;&quot;&quot;、0、&quot;0&quot;、NULL、FALSE、以及没有任何属性的对象都将被认为是空的。\r\n&lt;/p&gt;', '', '1', '2015-12-24 11:11:10');
INSERT INTO `problems` VALUES ('43', '在PHP中，当前脚本的名称（不包括路径和査询字符串）记录在预定义变量______中; 而链接到当前页面的的前一页面URL记录在预定义变量___中。', '', '2', '2', '2', '[\"\"]', '&lt;p class=&quot;NewStyle21&quot;&gt;\r\n	当前脚本名称：$_SERVER[&quot;PHP_SELF&quot;]或者 $_SERVER[&quot;SCRIPT_NAME&quot;]:\r\n&lt;/p&gt;\r\n&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	链接到当前页面的前一页面的URL地址：$_SERVER[&quot;HTTP_REFERER&quot;]。\r\n&lt;/p&gt;', '', '1', '2015-12-24 11:13:58');
INSERT INTO `problems` VALUES ('44', 'sort()、assort()、和ksort()有什么分别？它们分别在什么情况下使用？', '', '3', '3', '2', '[\"\"]', '&lt;p class=&quot;NewStyle19&quot; style=&quot;text-indent:28pt;&quot;&gt;\r\n	sort(),根据数组中元素的值，以英文字母顺序排序，索引键会由0到n-l重新编号.&amp;nbsp;主要是当数组索引键的值无关紧要时用来把数组排序。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;text-indent:28pt;&quot;&gt;\r\n	assort()，PHP没有assort()函式，所以可能是asort()的笔误。&amp;nbsp;asort(),对数组进行排序，数组的索引保持和单元的关联。主要用于对那些单元顺序很&amp;nbsp;重要的结合数组进行排序。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;text-indent:28pt;&quot;&gt;\r\n	ksort(),根据数组中索引键的值，以英文字母顺序排序，特别适合用于希望把索引键排序的关联数组\r\n&lt;/p&gt;\r\n&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	&amp;nbsp;\r\n&lt;/p&gt;', '', '1', '2015-12-24 11:16:49');
INSERT INTO `problems` VALUES ('45', '在PHP中error_reporting这个函数有什么作用？', '', '3', '3', '2', '[\"\"]', '&lt;p class=&quot;NewStyle18&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	打开或者关闭错误报告，如：&amp;nbsp;error_reporting(0);\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle18&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	error_reporting(E_ALL&amp;nbsp;&amp;amp; ~E_NOTICE);&amp;nbsp;error_reporting(E_ALL);\r\n&lt;/p&gt;', '', '1', '2015-12-24 11:18:08');
INSERT INTO `problems` VALUES ('46', 'error_reporttog(2047)什么作用？', '', '3', '3', '2', '[\"\"]', '&lt;p class=&quot;NewStyle21&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	2047&amp;nbsp;=&amp;nbsp;1+2&amp;nbsp;+&amp;nbsp;4&amp;nbsp;+&amp;nbsp;8+16&amp;nbsp;+&amp;nbsp;32&amp;nbsp;+&amp;nbsp;64+&amp;nbsp;128+256&amp;nbsp;+&amp;nbsp;512+&amp;nbsp;1024\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle21&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	其中，1&amp;nbsp;对应&amp;nbsp;E_ERROR，2&amp;nbsp;对应&amp;nbsp;E_WARNING，4&amp;nbsp;对应&amp;nbsp;E_PARSE,&amp;nbsp;8&amp;nbsp;对应&amp;nbsp;E_NOTICE,\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot;&gt;\r\n	16&amp;nbsp;对应&amp;nbsp;E_CORE_ERROR，&lt;span&gt;32&amp;nbsp;&lt;/span&gt;对应&amp;nbsp;E_CORE_WARNING,&amp;nbsp;64&amp;nbsp;对应&amp;nbsp;E_COMPILE_ERROR,&amp;nbsp;128&amp;nbsp;对应&amp;nbsp;E_COMPILE_WARNING，256&amp;nbsp;对应&amp;nbsp;E_USER_ERROR,&amp;nbsp;512&amp;nbsp;对应&amp;nbsp;E_USER_WARNING,&amp;nbsp;1024对应E_USER_NOTICE。error_reporting(2047)意味着上述错误都会显是出来。\r\n&lt;/p&gt;', '', '1', '2015-12-24 11:20:31');
INSERT INTO `problems` VALUES ('47', '常量如何定义？如何检测一个常量是否被定义？', '', '3', '3', '2', '[\"\"]', '&lt;p class=&quot;NewStyle22&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	定义常量：define()，\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle21&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	检测常量是否定义：defined()，如&amp;nbsp;defined(&quot;TEST&quot;,&quot;happy&amp;nbsp;new&amp;nbsp;year!&quot;);&amp;nbsp;if(defined(&quot;TEST&quot;)){&amp;nbsp;echo&amp;nbsp;TEST;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	}\r\n&lt;/p&gt;', '', '1', '2015-12-24 11:25:32');
INSERT INTO `problems` VALUES ('48', '执行程序段&lt;?php echo 8%(-2) ?&gt;将输出', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;NewStyle21&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	%为取模运算，输出0\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	$a%$b其结果的正负取决于$a的符号。&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	echo&amp;nbsp;((-8)%3).&quot;&amp;lt;br&amp;nbsp;/&amp;gt;&quot;;	//输出-2\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot; style=&quot;margin-left:28.0000pt;text-align:justify;&quot;&gt;\r\n	echo&amp;nbsp;(8%(-3)).&quot;&amp;lt;br/&amp;gt;&quot;;	//输出&amp;nbsp;2\r\n&lt;/p&gt;', '', '1', '2015-12-24 11:27:01');
INSERT INTO `problems` VALUES ('49', '数组函数arsort的作用是___;语句error_reporting(2047)的作用是___', '', '2', '2', '2', '[\"\"]', '&lt;p class=&quot;NewStyle20&quot; style=&quot;margin-left:28.0000pt;text-align:justify;&quot;&gt;\r\n	arsort:对数组进行逆向排序并保持索引关系\r\n&lt;/p&gt;\r\n&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;error_reporting(2047)的作用&amp;nbsp;report&amp;nbsp;All&amp;nbsp;errors&amp;nbsp;and&amp;nbsp;warnings\r\n&lt;/p&gt;', '', '1', '2015-12-24 11:28:16');
INSERT INTO `problems` VALUES ('50', '以Apache模块的方式安装PHP,在文件http.conf中首先要用语句__动态装载PHP 模块，然后再用语句___使得Apache把所有扩展名为php的文件都作为PHP脚本处理。', '', '2', '2', '2', '[\"\"]', '&lt;p class=&quot;NewStyle16&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	LoadModule php5_module &quot;c:/php/php5apache2.dll&quot;;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle16&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	AddTypc&amp;nbsp;application/x-httpd-php.php\r\n&lt;/p&gt;', '', '1', '2015-12-24 11:30:35');
INSERT INTO `problems` VALUES ('51', '—个函数的参数不能是对变量的引用，除非在php.ini中把___设为on', '', '2', '2', '2', '[\"\"]', '&lt;p class=&quot;NewStyle18&quot; style=&quot;margin-left:28pt;&quot;&gt;\r\n	allow_call_time_pass_reference&amp;nbsp;:是否启用在函数调用时强制参数被按照引用传递，默认\r\n&lt;/p&gt;\r\n&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	关闭。\r\n&lt;/p&gt;', '', '1', '2015-12-24 13:52:17');
INSERT INTO `problems` VALUES ('52', '在PHP中，heredoc是一种特殊的字符串，它的结束标志必须___', '', '2', '2', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:28.0000pt;text-align:justify;&quot;&gt;\r\n	顶格写，并且不能包含任何其它字符除&quot;;&quot;，如：\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle18&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	$str&amp;nbsp;= &amp;lt;&amp;lt;&amp;lt;SHOW\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle18&quot; style=&quot;text-indent:26pt;&quot;&gt;\r\n	my&amp;nbsp;name&amp;nbsp;is&amp;nbsp;Jiang&amp;nbsp;Qihui!&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle18&quot; style=&quot;text-indent:26pt;&quot;&gt;\r\n	SHOW;\r\n&lt;/p&gt;', '', '1', '2015-12-24 13:55:43');
INSERT INTO `problems` VALUES ('53', 'count(&quot;abc&quot;)输出的是什么？', '', '3', '1', '2', '[\"\"]', '1', '&lt;p class=&quot;NewStyle18&quot;&gt;\r\n	count:计算数组中的单元数目或对象中的属性个数，通常是一个array,任何其它类型都只有一个单元。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle18&quot;&gt;\r\n	对于对象，如來安装了&amp;nbsp;SPL，可以通过实现Countable接口来调用coun()。该接口只有一个方法count()，此方法返回count()函数的返回值。&lt;span style=&quot;line-height:1.5;&quot;&gt;如果var不足数组类型或者实现了&amp;nbsp;Countable接口的对象将返回1，有一个例外，&amp;nbsp;如果var是NULL则结果是0。&lt;/span&gt; \r\n&lt;/p&gt;', '1', '2015-12-24 13:59:50');
INSERT INTO `problems` VALUES ('54', 'PHP的意思，它能干些什么？', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:28.0000pt;&quot;&gt;\r\n	PHP&amp;nbsp;(&amp;nbsp;Hypertext&amp;nbsp;Preprocessor,超文本预处理器的字母缩写）足一种被广泛应用的开放&amp;nbsp;源代码的多用途脚本语言，它可嵌入到HTML中，尤其适合web开发\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:28.0000pt;&quot;&gt;\r\n	PHP能做任何事。PHP主要足用于服务端的脚本程序，因此可以用PHP来完成任何其它的CGI程序能够完成的工作，例如收集表单数据，生成动态网页，或者发送/接收&amp;nbsp;Cookies。但PHP的功能远不局限于此。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:28.0000pt;&quot;&gt;\r\n	PHP脚本主要用于以下三个领域：\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	1)&amp;nbsp;服务端脚本。这足PHP最传统，也是最主要的目标领域\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:28pt;text-indent:-28pt;&quot;&gt;\r\n	2)&amp;nbsp;命令行脚本。可以编写一段PHP脚本，并且不需要任何服务器或者浏览器来运行它通过这种方式，仅仅只需要PHP解析析器来执行。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	3)&amp;nbsp;编写桌面应用程序。\r\n&lt;/p&gt;', '', '1', '2015-12-24 14:03:39');
INSERT INTO `problems` VALUES ('55', 'Name a few ways to output (print) a block of HTML code In PHP?', '', '3', '3', '2', '[\"\"]', '你可以使用PHP中任何一种输出语句，包括echo、print、printf，大部分人都使用如下例的echo:&lt;br /&gt;\r\necho &quot;My string $variable&quot;;&lt;br /&gt;\r\n你也可以使用这种方法： echo &amp;lt;&amp;lt;&amp;lt;END&lt;br /&gt;\r\nThis text is written to the screen as output and this $variable is parsed too. If you wanted you can have &amp;lt;span&amp;gt; HTML tags in here as well.&amp;lt;/span&amp;gt; The END; remarks must be on a line of its own,and can\'t contain any extra white space&lt;br /&gt;\r\nEND;&lt;br /&gt;', '', '1', '2015-12-24 14:06:32');
INSERT INTO `problems` VALUES ('56', '$arr = array(\'james\',\'tom\',\'symfony\');请打印出第一个元素的值，并请将数组的值用\',\'号分隔并合成字串输出', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:29.0000pt;&quot;&gt;\r\n	打印第一个元素：echo $arr[0];\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:29.0000pt;&quot;&gt;\r\n	以\',\'众并成字符串：echo implode(\',\'，$arr);\r\n&lt;/p&gt;', '', '1', '2015-12-24 14:12:36');
INSERT INTO `problems` VALUES ('57', '$a = \'abcdef\';请取出$a的值并打印出第一个字母', '', '3', '3', '2', '[\"\"]', 'echo $a{0} 或 echo $a[0]', '', '1', '2015-12-24 14:14:31');
INSERT INTO `problems` VALUES ('58', 'What does === do? What\'s an example of something that will give true for \'==\', but not \'===\'?', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	===表示全等，是指的两个变景的值和类型都相等\r\n&lt;/p&gt;', '', '1', '2015-12-24 14:16:47');
INSERT INTO `problems` VALUES ('59', 'Which of the following snippets prints a representatioii of 42 with two declnud places?', '', '1', '1', '2', '[\"printf(&quot;%.2d\\\\n&quot;,42);\",\"printf(&quot;%1.2f\\\\n&quot;,42);\",\"printf(&quot;%1.2u\\\\n&quot;,42);\"]', '0', '', '1', '2015-12-24 14:19:41');
INSERT INTO `problems` VALUES ('60', 'Given $text=\'Content-type:text/xml\'; Which of the following prints \'text/xml\'?', '', '1', '1', '2', '[\"print substr($text, strchr($text,\':\'));\",\"print substr($text, strchr($text,\':\')+ 1);\",\"print substr($text, strpos($text,\':\')+ 1);\",\"print substr($text, strpos($text,\':\')+ 2);\",\"print substr($text,0, strchr($text,\':\'));\"]', '1', '', '1', '2015-12-24 14:25:39');
INSERT INTO `problems` VALUES ('61', '如何将一个数组元素的排序反转过来(例如一下代码反转以后的顺序是:array(\'d\',\'c\',\'b\',\'a\'))?(选择2个答案)', '&amp;lt;?php&amp;nbsp;&lt;br /&gt;\r\n$array = array(\'a\',\'b\',\'c\',\'d\');&lt;br /&gt;\r\n?&amp;gt;&lt;br /&gt;', '4', '1', '2', '[\"array_flip()\",\"array_reverse()\",\"sort()\",\"rsort()\"]', '1,3', '', '1', '2015-12-24 14:32:46');
INSERT INTO `problems` VALUES ('62', '定义MYPI=3.14________', '', '2', '1', '2', '[\"\"]', '&lt;span&gt;define(\'MYPI\',3.14)&lt;/span&gt;', '', '1', '2015-12-24 14:33:55');
INSERT INTO `problems` VALUES ('63', '用PHP编写代码在页面输出当前的北京时间，格式为2007-01-18 09:22:03”', '', '3', '2', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	date_default_timezone_set(\'PRC\');\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	echo&amp;nbsp;date(&quot;Y-m-d&amp;nbsp;H:i:s&quot;,time());\r\n&lt;/p&gt;', '', '1', '2015-12-24 14:39:21');
INSERT INTO `problems` VALUES ('64', '简述 GBK、GB2312、BIG5、GB18030', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	GB2312支持的汉字较少，GBK是相比GB2312汉字更为丰富，包括全部中日韩汉字，&amp;nbsp;GB18030相比GBK增加了一些少数名族汉字汉字库更为多样，但是常人很难用到，一般简体中文使用GBK而繁体中文使用BIG5。\r\n&lt;/p&gt;', '', '1', '2015-12-24 14:40:42');
INSERT INTO `problems` VALUES ('65', '计算某段字符串中某个字符出现的次数（例如：gdfgWgd59gmkWg中g的次数)', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;NewStyle16&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	$text&amp;nbsp;=&amp;nbsp;\'gdfgfdgd59gmkblg\';&amp;nbsp;echo&amp;nbsp;substr_count&amp;nbsp;($text,\'g\'\');\r\n&lt;/p&gt;', '', '1', '2015-12-24 14:41:39');
INSERT INTO `problems` VALUES ('66', '以下语句可能存在错误，如果存在错误请指出什么错误（每个语句单独考虑）', '&lt;p class=&quot;NewStyle19&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	print_r $val&amp;nbsp;=&amp;nbsp;333;&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	print_r($val&amp;nbsp;=&amp;nbsp;333);\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	$a+=&amp;nbsp;($b&amp;nbsp;=&amp;nbsp;4)&amp;nbsp;+&amp;nbsp;5;&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	$foo[bar]&amp;nbsp;=&amp;nbsp;\'enemy\';\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	function x($a&amp;nbsp;=&amp;nbsp;&quot;l&quot;，$b){}\r\n&lt;/p&gt;', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;NewStyle19&quot; style=&quot;margin-left:28pt;&quot;&gt;\r\n	print_r $val&amp;nbsp;=&amp;nbsp;333;&amp;nbsp;//error，print_r是一个函数，需加上括号，如果是print则可以&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;margin-left:28pt;&quot;&gt;\r\n	print_r($val&amp;nbsp;=&amp;nbsp;333);&amp;nbsp;//&amp;nbsp;正确\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;margin-left:28pt;&quot;&gt;\r\n	$a+=&amp;nbsp;($b&amp;nbsp;=&amp;nbsp;4)&amp;nbsp;+&amp;nbsp;5; //notice，$a未定义，但可以正确运行\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;margin-left:28pt;&quot;&gt;\r\n	$foo[bar]&amp;nbsp;=&amp;nbsp;\'enemy\'; //notice，最好bar&amp;nbsp;加上引兮\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;margin-left:28pt;&quot;&gt;\r\n	function x($a&amp;nbsp;=&amp;nbsp;&quot;l&quot;，$b){}//无，但给参数默认值应尽量从右向左\r\n&lt;/p&gt;', '', '1', '2015-12-24 14:47:40');
INSERT INTO `problems` VALUES ('67', '$arr = array(\'james\',\'tom\',\'symfony\');请将\'jack\'添加到$arr数组的开头,并把jack打印出来.', '', '3', '1', '2', '[\"\"]', 'array_unshift($arr,\'jack\');&lt;br /&gt;\r\necho $arr[0];&lt;br /&gt;', '', '1', '2015-12-24 14:53:40');
INSERT INTO `problems` VALUES ('68', '$arr = array(3,7,2,1,\'d\',\'abc\');请将$arr按照从大到小的顺序排序，并保持其键值不变', '', '3', '1', '2', '[\"\"]', 'arsort($arr);&lt;br /&gt;\r\nprint_r($arr)&lt;br /&gt;', '', '1', '2015-12-24 14:57:13');
INSERT INTO `problems` VALUES ('69', '$mail = &quot;gaofei@163.com&quot;;请将此邮箱的域(163.com)取出来并打印，看最多能写出几种方法？', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	echo&amp;nbsp;strstr($mail,\'163\');\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	echo&amp;nbsp;substr($mail,7);\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	echo&amp;nbsp;substr($mail，strpos($mail,\'@\')+l);\r\n&lt;/p&gt;\r\n&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$arr&amp;nbsp;=&amp;nbsp;explode(&quot;@&quot;,$mail);&amp;nbsp;echo $arr[1];\r\n&lt;/p&gt;', '', '1', '2015-12-24 15:01:58');
INSERT INTO `problems` VALUES ('70', 'PHP中的注释的写法，要列出三种？', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	//注释内容C风格的单行注释&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	#注释内容Unix风格的单行注释\r\n&lt;/p&gt;\r\n&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	&amp;nbsp;/*注释内容*/&amp;nbsp;C风格的多行注释\r\n&lt;/p&gt;', '', '1', '2015-12-24 15:02:40');
INSERT INTO `problems` VALUES ('71', '如何在一个php函数中使用具有全局属性的变量，说出两种方式', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	global $a&amp;nbsp;或者 $GLOBALS[\'a\']\r\n&lt;/p&gt;', '', '1', '2015-12-24 15:03:56');
INSERT INTO `problems` VALUES ('72', '若$aa=\'aa\';则print(\'aa is \\\'aa\\&quot;&quot;.&quot;&lt;br/&gt;&quot;)会输出什么?', '', '3', '1', '2', '[\"\"]', 'aa is \'aa\'', '', '1', '2015-12-24 15:11:56');
INSERT INTO `problems` VALUES ('73', '写出php的public、protected、private三种访问控制棋式的区别', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:27.0000pt;&quot;&gt;\r\n	public:公有，任何地方都可以访问\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:27.0000pt;&quot;&gt;\r\n	protected:继承，只能在本类或子类中访问，在其它地方不允许访问&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:27.0000pt;&quot;&gt;\r\n	private:私有，只能在本类中访问，在其他地方不允许访问\r\n&lt;/p&gt;', '', '1', '2015-12-24 15:25:52');
INSERT INTO `problems` VALUES ('74', 'PHP5中魔术方法函数有哪几个，请举例说明各自的用法', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:27.0000pt;text-align:justify;&quot;&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle22&quot; style=&quot;margin-left:27.0000pt;text-align:justify;&quot;&gt;\r\n	_sleep	serialize之前被调用\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle22&quot; style=&quot;margin-left:27pt;&quot;&gt;\r\n	_wakeup&amp;nbsp;unserialize&amp;nbsp;时被调用&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle22&quot; style=&quot;margin-left:27pt;&quot;&gt;\r\n	_toString打印一个对象时被调用\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle22&quot; style=&quot;margin-left:27pt;&quot;&gt;\r\n	_set_state调用var_export时被调用，用_set_state的返回值作为var_export的返回值&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle22&quot; style=&quot;margin-left:27pt;&quot;&gt;\r\n	_construct构造函数，实例化对象时被调用&amp;nbsp;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle22&quot; style=&quot;margin-left:27pt;&quot;&gt;\r\n	_destruct析构函数，当对象销毁时被调用\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle21&quot; style=&quot;margin-left:27.0000pt;&quot;&gt;\r\n	_call对象调用某个方法，苦存在该方法，则直接调用，若不存在，则调用&lt;span style=&quot;line-height:1.5;&quot;&gt;__call函数&amp;nbsp;&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle21&quot; style=&quot;margin-left:27.0000pt;&quot;&gt;\r\n	&lt;span style=&quot;line-height:1.5;&quot;&gt;_get读取一个对象属性时，若属性存在，则直接返回，若不存在，则调用_get函数&amp;nbsp;&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle21&quot; style=&quot;margin-left:27.0000pt;&quot;&gt;\r\n	&lt;span style=&quot;line-height:1.5;&quot;&gt;_set设置一个对象的属性时，若属性存在，则直接赋值，若不存在，则调用_set函数&amp;nbsp;&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle21&quot; style=&quot;margin-left:27.0000pt;&quot;&gt;\r\n	&lt;span style=&quot;line-height:1.5;&quot;&gt;_isset检测一个对象的属性是否存在时被调用&amp;nbsp;&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle21&quot; style=&quot;margin-left:27.0000pt;&quot;&gt;\r\n	&lt;span style=&quot;line-height:1.5;&quot;&gt;_unset&amp;nbsp;unset&amp;nbsp;—个对象的属性时被调用&amp;nbsp;&lt;/span&gt;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle21&quot; style=&quot;margin-left:27.0000p', '', '1', '2015-12-24 15:31:18');
INSERT INTO `problems` VALUES ('75', '类的属性可以序列化后保存到session中,从而以后可以恢复整个类，这要用到的函数是___', '', '3', '1', '2', '[\"\"]', 'serialize()和unserialize()', '', '1', '2015-12-24 15:34:14');
INSERT INTO `problems` VALUES ('76', '接口和抽象类的区别是什么？', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;NewStyle20&quot;&gt;\r\n	抽象类足一种不能被实例化的类，只能作为其他类的父类来使用。抽象类是通过关键字&amp;nbsp;abstract来声明的。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot;&gt;\r\n	抽象类与普通类相似，都包含成员变量和成员方法，两者的区别在于，抽象类中至少要包含一个抽象方法，\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot;&gt;\r\n	抽象方法没有方法体，该方法天生就是要被了类重写的。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot;&gt;\r\n	抽象方法的格式为：abstract&amp;nbsp;function&amp;nbsp;abstractMethod();\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot;&gt;\r\n	接口是通过interface关键字来声明的，接口中的成员常量和方法都是public的，方法可以不写关键public，\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot;&gt;\r\n	接口中的方法也是没有方法体。接口中的方法也天生就是要被子类实现的。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot;&gt;\r\n	抽象类和接口实现的功能十分相似，最大的不同是接口能实现多继承。在应用中选择抽象类还是接口要看具体实现。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot;&gt;\r\n	子类继承抽象类使用extends，子类实现接口使用implements\r\n&lt;/p&gt;', '', '1', '2015-12-24 15:38:46');
INSERT INTO `problems` VALUES ('77', '类中如何定义常量、如何类中调用常量、如何在类外调用常量。', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;NewStyle18&quot;&gt;\r\n	类中的常量也就是成员常量，常量就是不会改变的量，是一个恒值。定义常量使用关键字const，例如：const&amp;nbsp;PI&amp;nbsp;=&amp;nbsp;3.1415326;\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle18&quot;&gt;\r\n	无论是类内还是类外，常量的访问和变量是不一样的，常量不需要实例化对象，\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle18&quot;&gt;\r\n	访问常量的格式都是类名加作用域操作符号（双冒号）来调用，即：类名::类常量名。\r\n&lt;/p&gt;', '', '1', '2015-12-24 15:41:22');
INSERT INTO `problems` VALUES ('78', 'autoload()函数是如何运作的?', '', '3', '1', '2', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot;&gt;\r\n	使用这个魔术函数的基本条件是类文件的文件名要和类的名字保持一致。&lt;span style=&quot;line-height:1.5;&quot;&gt;当程序执行到实例化某个类的时候，如果在实例化前没有引入这个类文件，那么就自动&amp;nbsp;执行_autoload()函数。&lt;/span&gt;&lt;span style=&quot;line-height:1.5;&quot;&gt;这个函数会根据实例化的类的名称来査找这个类文件的路径，当判断这个类文件路径下&amp;nbsp;确实存在这个类文件后就执行include或者require来载入该类，然后程序继续执行，如果这&amp;nbsp;个路径下不存在该文件时就提示错误。&lt;/span&gt;\r\n&lt;/p&gt;', '', '1', '2015-12-24 15:43:59');
INSERT INTO `problems` VALUES ('79', '哪种OOP设置棋式能让类在整个脚本里只实例化一次？', '', '1', '1', '6', '[\"MVC\",\"\\u4ee3\\u7406\\u6a21\\u5f0f\",\"\\u72b6\\u6001\\u6a21\\u5f0f\",\"\\u62bd\\u8c61\\u5de5\\u5382\\u6a21\\u5f0f\",\"\\u5355\\u4ef6\\u6a21\"]', '4', '', '1', '2015-12-24 15:45:07');
INSERT INTO `problems` VALUES ('80', '借助继承，我们可以创建其他类的派生类。在PHP中，子类最多可以继承几个父类？', '', '1', '1', '2', '[\"1\\u4e2a\",\"2\\u4e2a\",\"\\u53d6\\u51b3\\u4e8e\\u7cfb\\u7edf\\u8d44\\u6e90\",\"3\\u4e2a\",\"\\u60f3\\u8981\\u51e0\\u4e2a\\u6709\\u51e0\\u4e2a\"]', '0', '', '1', '2015-12-24 15:47:36');
INSERT INTO `problems` VALUES ('81', '写出下面2个PHP操作Mysql函数的作用和区别', '', '3', '1', '3', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	mysql_num_rows() mysql_affected_rows()\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:28.0000pt;&quot;&gt;\r\n	这两个函数都作用于mysql_query($query)操作的结果，mysql_num_rows()返回结果集中行的数目。mysql_affected_rows()取得前一次MySQL操作所影响的记录行数。&amp;nbsp;mysql_num_rows()仅对SELECT语句有效，要取得被INSERT,&amp;nbsp;UPDATE或者DELETE査洵所影响到的行的数目，用mysql_affected_rows()。\r\n&lt;/p&gt;', '', '1', '2015-12-24 15:52:46');
INSERT INTO `problems` VALUES ('82', 'Sql语句应该考虑哪些安全性？', '', '3', '1', '3', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;margin-left:28.0000pt;&quot;&gt;\r\n	防止Sql注入，对特殊字符进行转义、过滤或者使用预编译的sql语句绑定变量。&amp;nbsp;最小权限原则，特别是不要用root账户，为不同的类型的动作或者组建使用不同的账&lt;span style=&quot;line-height:1.5;&quot;&gt;户。&lt;/span&gt;&lt;span style=&quot;line-height:1.5;&quot;&gt;当sql运行出错时，不要把数据库返回的错误信息全部显示给用户，以防止泄露服务器和数据库相关信息。&lt;/span&gt;\r\n&lt;/p&gt;', '', '1', '2015-12-24 15:55:23');
INSERT INTO `problems` VALUES ('83', '简单描述mysql中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么 影响（从读写两方面）', '', '3', '1', '3', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:28.0000pt;&quot;&gt;\r\n	索引是一种特殊的文件（InnoDB数据表上的索引是表空间的一个组成部分〉，它们包含&amp;nbsp;着对数据表里所有记录的引用指针。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:28.0000pt;&quot;&gt;\r\n	普通索引（由关键字KEY或INDEX定义的索引）的唯一任务足加快对数据的访问速度\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:28.0000pt;text-align:justify;&quot;&gt;\r\n	普通索引允许被索引的数据列包含重复的值如果能确定某个数据列将只包含彼此各不相同的值，在为这个数据列创建索引的时候就应该用关键字UNIQUE把它定义为一个唯一索引。也就是说，唯一索引可以保证数据记录的唯一性。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:28.0000pt;&quot;&gt;\r\n	主键，是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键用于唯一标识—条id录，使用关键字PRIMARY&amp;nbsp;KEY来创违。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:28.0000pt;&quot;&gt;\r\n	索引可以覆盖多个数据列，如像INDEX(columnA，columnB)索引，这就是联合索引。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:28.0000pt;&quot;&gt;\r\n	索引可以极大的提高数据的査洵速度，但是会降低插入、删除、更新表的速度，因为在执行这些写操作时，还要操作索引文件。\r\n&lt;/p&gt;', '', '1', '2015-12-24 16:03:26');
INSERT INTO `problems` VALUES ('84', '如何用命令把mysql里的数据备份出来', '', '3', '1', '3', '[\"\"]', '1.导出一张表&lt;br /&gt;\r\nmysqldump -u 用户名 -p 密码 库名 表名 &amp;gt; 文件名(如D:/a.sql)&lt;br /&gt;\r\n2.导出多张表&lt;br /&gt;\r\nmysqldump -u 用户名 -p 密码 库名 表名1 表名2 表名3 &amp;gt;文件名(如D:a.sql)&lt;br /&gt;\r\n3.导出所有表&lt;br /&gt;\r\nmysqldump -u 用户名 -p 密码 库名 &amp;gt; 文件名(如D:/a.sql)&lt;br /&gt;\r\n4.导出一个库&lt;br /&gt;\r\nmysqldump -u 用户名 -p 密码 -B库名 &amp;gt; 文件名(如D:/a.sql)&lt;br /&gt;', '', '1', '2015-12-24 16:05:19');
INSERT INTO `problems` VALUES ('85', 'What\'s the difference between mysql_fetch_row() and mysql_fetch_array()?', '', '3', '1', '3', '[\"\"]', '&lt;p class=&quot;NewStyle26&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	mysql_fetch_row()从和指定的结束标识关联的结果集中取得一行数据并作为数组返回。每个结果的列储存在一个数组的单元中，偏移量从0开始。&lt;span style=&quot;line-height:1.5;&quot;&gt;mysql_fetch_array()是mysql_fetch_row()的扩展版本。除了将数据以数字索引方式储存在数组之外，还可以将数据作为关联索引储存用字段名作为键名。mysql_fetch_array()是可选的第二个参数result_type是一个常量，可以接受以下值:MYSQL_ASSOC, MYSQL_NUM 和 MYSQL_BOTH。其默认值是MYSQL_BOTH。如果用了 MYSQL_BOTH,将得到一个同时包含关联和数字索引的数组。用 MYSQL_ASSOC 只得到关联索引（如同 mysql_fetch_assoc()那样），用MYSQL_NUM只得到数字索引（如同mysql_fetch_row()那样）。&lt;/span&gt;\r\n&lt;/p&gt;', '', '1', '2015-12-24 16:45:43');
INSERT INTO `problems` VALUES ('86', '请写出php连mysql连接中获取下一个自增长id值的方法，可以写多个', '', '3', '1', '3', '[\"\"]', '&lt;p class=&quot;NewStyle20&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	方法一，使用&amp;nbsp;show&amp;nbsp;table&amp;nbsp;status，然后获取&amp;nbsp;auto_increment&amp;nbsp;的值\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	方法二，使用&amp;nbsp;select&amp;nbsp;max(id)&amp;nbsp;+&amp;nbsp;1&amp;nbsp;from&amp;nbsp;table\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	方法三，如果是刚插入记录，可以使用last_insert_id(） +&amp;nbsp;1获得\r\n&lt;/p&gt;', '', '1', '2015-12-24 16:51:06');
INSERT INTO `problems` VALUES ('87', '从表login中选出name字段包含admin的前10条结果所有信息的sql语句', '', '3', '1', '3', '[\"\"]', '&lt;p class=&quot;NewStyle18&quot; style=&quot;margin-left:29pt;&quot;&gt;\r\n	SELECT&amp;nbsp;*&amp;nbsp;FROM&amp;nbsp;login&amp;nbsp;WHERE&amp;nbsp;name&amp;nbsp;LIKE&amp;nbsp;?％admin%?&amp;nbsp;&lt;span style=&quot;line-height:1.5;&quot;&gt;LIMIT&amp;nbsp;10;&lt;/span&gt;\r\n&lt;/p&gt;', '', '1', '2015-12-24 16:52:59');
INSERT INTO `problems` VALUES ('88', '表中有ABC三列，用SQL语句实现：当A列大于B列时选择A列，否则选择B列，当 B列大于C列时选择B列否则选择C列', '', '3', '1', '3', '[\"\"]', '&lt;p class=&quot;NewStyle19&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	使用case语句，如K:\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle18&quot; style=&quot;text-indent:29.0000pt;&quot;&gt;\r\n	SELECT&amp;nbsp;CASE&amp;nbsp;WHEN&amp;nbsp;A&amp;nbsp;&amp;gt;&amp;nbsp;B&amp;nbsp;THEN&amp;nbsp;A&amp;nbsp;ELSE&amp;nbsp;B&amp;nbsp;END,\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle18&quot; style=&quot;margin-left:29pt;&quot;&gt;\r\n	CASE&amp;nbsp;WHEN B&amp;nbsp;&amp;gt;&amp;nbsp;C&amp;nbsp;THEN&amp;nbsp;B&amp;nbsp;ELSE&amp;nbsp;C&amp;nbsp;END&amp;nbsp;FROM&amp;nbsp;table\r\n&lt;/p&gt;', '', '1', '2015-12-24 16:54:16');
INSERT INTO `problems` VALUES ('89', '写出三种以上MySQL数据库存储引擎的名称（提示：不区分大小写）', '', '3', '1', '3', '[\"\"]', 'MylSAM、InnoDB、BDB (Berkeley DB)、Merge、Memory (Heap)、Example、Federated、\r\nArchive、CSV、Blackhole、MaxDB 等等十几个引擎。', '', '1', '2016-01-13 15:30:02');
INSERT INTO `problems` VALUES ('90', '请简述数据库设计的范式及应用', '', '3', '1', '3', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:29.0000pt;&quot;&gt;\r\n	—般第3范式就足以，用于表结构的优化，这样做既可以避免应用程序过于复杂同时也避免了&amp;nbsp;SQL语句过于庞大所造成系统效率低下。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:29.0000pt;&quot;&gt;\r\n	第一范式：若关系模式R的每一个属性是不可再分解的，且有主键，则属于第一范式。&amp;nbsp;第二范式：若R属于第一范式，且所有的非主键属性都完全函数依赖于主键属性，则满足第二范式。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:29.0000pt;&quot;&gt;\r\n	第三范式：若R属于第二范式，且所有的非主键属性没有一个是传递函数依赖于候选主键属性，则满足第三范式。\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:29.0000pt;&quot;&gt;\r\n	在实际使用中，可以根椐需求适当的逆范式。\r\n&lt;/p&gt;', '', '1', '2016-01-13 15:37:42');
INSERT INTO `problems` VALUES ('91', '取得最新一次添加记录（假设id为主键，并且是自增类型）所产生的id的函数是什么？', '', '3', '1', '3', '[\"\"]', '&lt;p class=&quot;NewStyle17&quot; style=&quot;text-indent:29.0000pt;&quot;&gt;\r\n	mysql_insert_id();如果上一查询没有产生&amp;nbsp;AUTO_INCREMENT&amp;nbsp;的值，则&amp;nbsp;mysql_insert_id()&amp;nbsp;返回0。\r\n&lt;/p&gt;', '', '1', '2016-01-13 15:39:37');
INSERT INTO `problems` VALUES ('92', 'php连接mysql之后，如何设置mysql的字符集编码为utf8? ', '', '3', '1', '3', '[\"\"]', '&lt;p class=&quot;MsoNormal&quot;&gt;\r\n	mysql_query(&quot;set&amp;nbsp;names&amp;nbsp;utf8&quot;)\r\n&lt;/p&gt;', '', '1', '2016-01-13 15:40:51');
INSERT INTO `problems` VALUES ('93', 'php访问数据库有哪几步？', '', '3', '3', '3', '[\"\"]', '&lt;p class=&quot;NewStyle20&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	主要有以下几个步骤：\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;text-indent:0.0000pt;text-align:justify;&quot;&gt;\r\n	连接数据库服务器：mysql_connect(\'host\',\'user\',\'password\');\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	选择数据库：mysql_select_db(数据库名)；\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	设置从数据库提取数据的字符集：mysql_query(&quot;set&amp;nbsp;names&amp;nbsp;utf8&quot;);\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;text-indent:0.0000pt;text-align:justify;&quot;&gt;\r\n	执行&amp;nbsp;sql&amp;nbsp;语句：mysql_query(sql&amp;nbsp;语句)；\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	处理结果集\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle19&quot; style=&quot;text-indent:0.0000pt;text-align:justify;&quot;&gt;\r\n	关闭结果集，释放资源：mysql_free_result($result);\r\n&lt;/p&gt;\r\n&lt;p class=&quot;NewStyle20&quot; style=&quot;text-align:justify;&quot;&gt;\r\n	关闭与数据库服务器的连接：mysql_close($link);\r\n&lt;/p&gt;', '', '1', '2016-01-13 15:42:35');
INSERT INTO `problems` VALUES ('94', '在平常mysql优化方面，最基本的也是最重要的优化是（）', '', '3', '1', '3', '[\"\"]', '查询优化', '', '1', '2016-01-13 15:43:09');
INSERT INTO `problems` VALUES ('95', '列表mysql数据库常用的几种类型HEAP,()，()', '', '3', '1', '3', '[\"\"]', 'MyISAM,innoDB', '', '1', '2016-01-27 14:13:25');
INSERT INTO `problems` VALUES ('96', '请对于据select * from table example where(a and b)and c or(((a and b) and (c and d)))优化的语句', '', '3', '1', '3', '[\"\"]', '题目多了一个括号，在where后面，但不影响题目的意思，可以将sql语句优化如下:select * from table example where a and b and c', '', '1', '2016-01-27 14:16:04');
INSERT INTO `problems` VALUES ('97', ' 解释MySQL外连接、内连接与自连接的区别', '', '3', '1', '3', '[\"\"]', '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;先说什么是交叉连接，交叉链接又叫笛卡尔积，她是指不使用任何条件，直接将一个表的所有记录和另一个表中的所有记录一匹配。&lt;br /&gt;\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;内连接则是只有条件的交叉连接，根据某个条件筛选出符合条件的记录，不符合条件的记录不会出现在结果集中，即内连接只连接匹配的行。&lt;br /&gt;\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;而外连接其结果集中不仅包含符合连接条件的行，而且还会包括左表、右表或两个表中的所有数据行，这三种情况依次称之为左外连接，右外连接，和全外连接。&lt;br /&gt;\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;左外连接，也称左连接，左表为主表，左表中的所有记录都会出现在结果集中，对于那些在右表中并没有匹配的记录，仍然要显示，右边对应的那伙字段以NULL来坑充。&lt;br /&gt;\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;右外连接，也称右连接，右表为主表，右表中的所有记录都会出现在结染集中。左连接和右连接可以互换，MySQL目前还不支持全外连接。&lt;br /&gt;', '', '1', '2016-01-27 14:26:17');
INSERT INTO `problems` VALUES ('98', '两条查询语句，一条是select * from table1 where id &gt;10 adn id &lt;100,一条是select * from table2 where id&gt;200 and id&lt;500,请尝试只写一条SQL语句，完成相应的查询任务。', '', '3', '1', '3', '[\"\"]', '使用union语句，但有个前提，即 tablel 和 table2 的结构相同&amp;nbsp;&lt;br /&gt;\r\nSELECT * FROM tablel WHERE id &amp;gt; 10 AND id &amp;lt; 100&lt;br /&gt;\r\nUNION ALL&amp;nbsp;&lt;br /&gt;\r\nSELECT * FROM tablcZ WHERE id &amp;gt; 200 AND id &amp;lt; 500&amp;nbsp;&lt;br /&gt;', '', '1', '2016-01-27 14:32:05');
INSERT INTO `problems` VALUES ('99', '写出你所知道的数据库', '', '3', '1', '3', '[\"\"]', 'MySQL , SQL Server , oracle , Sybase . informix , DB2等', '', '1', '2016-01-27 14:34:01');
INSERT INTO `problems` VALUES ('100', '用户互为好友的SNS 存储结构怎么设计', '', '3', '1', '3', '[\"\"]', '首先是有用户表，如下：&amp;nbsp;&lt;br /&gt;\r\nCREATE TABLE user(&lt;br /&gt;\r\nid INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,&lt;br /&gt;\r\nusername VARCHAR (30) NOT NULL DEFAULT &quot; COMMENT \'用户名\'&lt;br /&gt;\r\nemail VARCHAR (50) NOT NULL DEFAULT &quot; COMMENT \'邮箱\',&lt;br /&gt;\r\npassword CHAR (32) NOT NULL DEFAULT &quot; COMMENT \'密码\'&lt;br /&gt;\r\n) engine = MyIsAM charset = utf8 comment=\'用户表\'&lt;br /&gt;\r\n&amp;nbsp;其次是用户间的关系，如下：&amp;nbsp;&lt;br /&gt;\r\nCREATE TABLE relation(&amp;nbsp;&lt;br /&gt;\r\nrel_id INT UNSIGNED N0T NULL PRIMARY KEY AUT0 INCREMENT,&lt;br /&gt;\r\nfuid INT UNSIGNED NOT NULL COMMENT \'关注人的 id\',&lt;br /&gt;\r\nsuid INT UNSIGNED NOT NULL COMMENT \'被关注人的id\',&lt;br /&gt;\r\nrelation_type ENUM ( \'S\',\'D\') NOT NULL DEFAULT \'S\' COMMENT \'关系，s为关注，d表示为好友\'&lt;br /&gt;\r\n)engine = MyISAM charset = utf8 comment=\'用户关系表\';&lt;br /&gt;', '', '1', '2016-01-27 14:45:03');
INSERT INTO `problems` VALUES ('101', '假设现在有一个数据库服务器，服务器地址为192.168.0.110，用户名为root 密码为password请使用PHP编写一个面向过程化的连接该数据库的脚本代码', '', '3', '1', '3', '[\"\"]', '$conn = mysql_connect(\'192.168.0.110\',\'root \',\'password\') or die(\'数据库连接失败\') ;&amp;nbsp;', '', '1', '2016-01-27 14:54:00');
INSERT INTO `problems` VALUES ('102', '简述在 MySQL 数据库中 MyIS 心和 InnoDB 的区别', '', '3', '1', '3', '[\"\"]', '区别上要有以下几个：&lt;br /&gt;\r\n构成上， MyISAM的表在磁盘中有三个文件组成，分别是表定义文件（ . frm ）、数据文件（ . MYD ）、索引文件（ . MYI ) ，而 InnoDB 的表由表定义文件（ . frm ）、表空间数据和日志文件组成。&lt;br /&gt;\r\n安全方面， MyISAM强调的是性能．其查询效率较高，但不支持事务和外键等安全性方面的功能，而InnoDB支持事务和外键等高级功能,查询效率稍低。&lt;br /&gt;\r\n对锁的支持， MyISAM支持表锁，而InnoDB支持行锁。&lt;br /&gt;', '', '1', '2016-01-27 15:02:05');
INSERT INTO `problems` VALUES ('103', '现在有下面一个查询语句肚肠select * from tabname where id=2 and password=\'abc\' 如何判断它是现在是最优的', '', '3', '1', '3', '[\"\"]', '可以使用explain select * from tabname where id = 2 and password = \'abc ’来分析其执行情况。', '', '1', '2016-01-27 15:05:02');
INSERT INTO `problems` VALUES ('104', '请问如何在Mysql操作中如何写入utf8格式数据', '', '3', '1', '3', '[\"\"]', '首先确保数据库中的表是基于utf8编码的，其次php文件是utf8编码，在执行 mysql 操作之前，执行 mysql_query(\'set names utf8\'）操作，对于要操作的文本如果是utf8编码，则可以直接操作，如果是其它编码，则可以使用 iconv 函数将其转化为 utf8 编码，然后写入。', '', '1', '2016-01-27 15:08:05');
INSERT INTO `problems` VALUES ('105', 'mysql 中 varchar 的最大长度是多少？用什么类型的字段存储大文本？ date 和 datetime 和 timestamp 什么区别？怎么看数据库中有哪些 sql 正在执行？', '', '3', '1', '3', '[\"\"]', 'varchar 的最大有效长度由最大行大小和使用的字符集确定。整体最大长度是 65532 字节。在 varchar 存字符串的时候，第一个字节是空的．不存任何的数据．然后还需要两个字节来存放字符串的长度。所以有效长度就是 65535 - l - 2 = 65532 .&lt;br /&gt;\r\n由字符集来确定，字符集分单字节和多字节，如果是单字节，如 latinl ，则最多可以存放 65532 个字符，如果是多字节，如 GBK 则可以存放 32766 个字符， UTF8 则可以存放 21844 个字符。&lt;br /&gt;\r\n存储大文本可以使用 text 类型。&lt;br /&gt;\r\ndate 表示日期，其范围为 1000-01-01 ~9999-12-31&amp;nbsp;&lt;br /&gt;\r\ndatetime 表示日期时期， 其范围为 1000-01-01 00: 00 : 00 ~ 9999 - 12 - 31 23 : 59 : 59&lt;br /&gt;\r\ntimestamp 是 unix 时间戳的日期时间表示方式，其范围较小为 1970 - 01 - 01 00:00:00 ~ 2038 - 01 - 19 03:14:07 , timestamp 具备自动初始化和自动更新功能。&lt;br /&gt;\r\n查看数据库中正在执行的 sql 语句可以使用日志，也可以使用 show proccsslist 命令。&amp;nbsp;&lt;br /&gt;', '', '1', '2016-01-27 15:18:23');
INSERT INTO `problems` VALUES ('106', '现在有一个mysql数据库表 visits 记录用户访问情况，表结构如下：', 'visits(&amp;nbsp;&lt;br /&gt;\r\nid int unsigned auto_increment,&lt;br /&gt;\r\nuser_id int unsigned &amp;nbsp;comment \'本次访问页面数\',&lt;br /&gt;\r\nvisit_time timestamp comment \'本次访问开始时间\',&lt;br /&gt;\r\npimary key (id)&lt;br /&gt;\r\n);&lt;br /&gt;\r\n用户没访问过一次网站（从进入到离开），会增加一条记录。记录用户的ID(user_id),以及访问的页面总数。比如：&lt;br /&gt;\r\n1.208,2,//208这个用户访问2个页面&lt;br /&gt;\r\n2.2073,3，&lt;br /&gt;\r\n3,208,1,//208用户访问了1页面&lt;br /&gt;\r\n&lt;br /&gt;\r\n(1).请写一个SQL语句挑出你是累计访问页面数最多的10个用户(user_id)和对应的访问页面数。&lt;br /&gt;\r\n(2).请写一个SQL语句，输出累计访问页面数分别页面数分别等于1,2,3,4,5,6,7,8,9,10的唯一用户的数量，如果某个数量对应的用户数为0，可以不输出。&lt;br /&gt;\r\n&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '3', '1', '3', '[\"\"]', '从题目的描述来看，表结构貌似有些问题， user_id 应为用户 ID ，而不是访问页面数,增加一个字段 pages 表示访问页面数。&lt;br /&gt;\r\n查询访问页面数最多的 10 个用户的查询语句如下：&amp;nbsp;&lt;br /&gt;\r\nSELECT user_id , sum(pages)as total&amp;nbsp;&lt;br /&gt;\r\nFROM visits&amp;nbsp;&lt;br /&gt;\r\nGROUP BY user_id&amp;nbsp;&lt;br /&gt;\r\nORDER BY total DESC LIMIT 10 ;&amp;nbsp;&lt;br /&gt;\r\n&lt;br /&gt;\r\n输出累计访问页面数分别等于 1,2,3,5,6,7,8,9,10的唯一用户的数量的查询语句如下：&amp;nbsp;&lt;br /&gt;\r\nSELECT total,count(user_id)&lt;br /&gt;\r\nFROM(&lt;br /&gt;\r\nSELECT user_id,sum(pages) AS total&lt;br /&gt;\r\nFROM visits&amp;nbsp;&lt;br /&gt;\r\nGROUP BY user_id) As temp&lt;br /&gt;\r\nWHERE total IN(l,2,3,4,5,6,7,8,9,10)&lt;br /&gt;\r\nGROUP BY total;&lt;br /&gt;', '', '1', '2016-01-28 09:48:22');
INSERT INTO `problems` VALUES ('107', '简述存储过程的适用情况', '', '3', '1', '3', '[\"\"]', '当需要处理复杂的查询和运算时，可以使用存储过程。&lt;br /&gt;\r\n从应用分层的原则，大量使用存储过程导致业务逻辑分散在 DB 和应用服务器层，不利于维护和更新。&lt;br /&gt;\r\n总体来说，存储程序可以用，但要慎重，最好只用来维护，不用于业务逻辑和支撑高并发高性能的东西。&lt;br /&gt;', '', '1', '2016-01-28 09:51:29');
INSERT INTO `problems` VALUES ('108', '写出smarty模板的特点', '', '3', '1', '2', '[\"\"]', '速度快，编译型，缓存技术，插件机制，强大的表现逻辑', '', '1', '2016-01-28 09:56:26');
INSERT INTO `problems` VALUES ('109', '打开php.ini中的safe_mode,会影响哪些函数？至少说出6个', '', '3', '1', '2', '[\"\"]', 'safe_mode,php安全模式，他提供一个基本安全的共享环境，在一个有多个用户账户存在的php开发的web服务器上。当安全模式打开的时候，一些函数将被安全的禁止，而另一些函数的功能将会受到限制，如：chdir,move_uploaded_file,chgrp,parse_ini_file,chown,rmdir,copy,rename,fopen,require,mkdir,unlink等&lt;br /&gt;\r\n注意，在php5.3以上版本，safe_mode被弃用，在php5.4以上版本，则将此特性完全去除了&lt;br /&gt;', '', '1', '2016-01-28 10:05:13');
INSERT INTO `problems` VALUES ('110', '抓取远程图片到本地，你会用什么函数', '', '3', '1', '2', '[\"\"]', 'file_get_contents 或者curl', '', '1', '2016-01-28 10:06:08');
INSERT INTO `problems` VALUES ('111', 'PHP的垃圾收集机制是怎样的', '', '3', '1', '2', '[\"\"]', 'PHP可以自动进行内存管理，清除不再需要的对象。PHP使用了引用计数(reference counting)这种单纯的垃圾回收(garbage collection)机制。每个对象都内含一个引用计数器，每个reference连接到对象，计数器加1.当reference离开生存空间或被设为NULL，计数器减1.当某个对象的引用计数器为零时，PHP知道你将不再需要使用这个对象，释放其所占的内存空间。', '', '1', '2016-01-28 10:10:35');
INSERT INTO `problems` VALUES ('112', 'mysql_fetch_row()和mysql_fetch_array()有什么分别', '', '3', '1', '2', '[\"\"]', 'mysql_fetch_row()把数据库的一列储存在一个以零为基数的数组中，第一栏在数组的索引0，第二栏在索引1，一次类推。&lt;br /&gt;\r\nmysql_fetch__assoc()把数据库的一列储存在一个关联数组中，数组的索引就是字段名称，例如我的数据库查询送回&quot;first_name&quot;、&quot;last_name&quot;、&quot;email&quot;三个字段，数组的索引便是&quot;first_name&quot;、&quot;last_name&quot;和&quot;email&quot;。mysql_fetch_array()可以同时送回mysql_fetch_row()和mysql_fetch_assoc()的值&lt;br /&gt;', '', '1', '2016-01-28 10:15:24');
INSERT INTO `problems` VALUES ('113', '有一个网页地址，比如PHP开发资源网主页：http://www.phpres.com/index.html,如何得到它的内容', '', '3', '1', '2', '[\"\"]', '方法1（对于PHP5及更高版本）：&lt;br /&gt;\r\n$readcontents = fopen(&quot;http://www.phpres.com/index.html&quot;,&quot;rb&quot;);&lt;br /&gt;\r\n$contents = stream_get_contents($readcontents);&lt;br /&gt;\r\nfclose($readcontents);&lt;br /&gt;\r\necho $contents;&lt;br /&gt;\r\n方法2:&lt;br /&gt;\r\necho file_get_contents(&quot;http://www.phpres.com/index.html&quot;);&lt;br /&gt;', '', '1', '2016-01-28 10:20:12');
INSERT INTO `problems` VALUES ('114', '谈谈对mvc的认识', '', '3', '1', '2', '[\"\"]', '由模型(model),视图(view),控制器(controller)完成的应用程序，model层辅助提供数据，和数据库有关的操作都交给模型层来处理，view层则提供交互的界面，并输出数据，而controller层则负责接收请求，并分发给相应的model来处理，然后调用view层来显示。', '', '1', '2016-01-28 10:23:25');
INSERT INTO `problems` VALUES ('115', 'what does  the GD library do', '', '3', '2', '2', '[\"\"]', 'GD库提供了一系列用来处理图片的API，使用GD库可以处理图片，或者生成图片。在网站上GD库通常用来生成缩略图或者用来对图片加水印或者对网站数据生成报表。自从PHP4.3.0版本后GD便内建在PHP系统中', '', '1', '2016-01-28 10:26:35');
INSERT INTO `problems` VALUES ('116', 'what function can you use to open a file for reading and writing', '', '1', '1', '2', '[\"fget()\",\"file_open()\",\"fopen()\",\"open_file()\"]', '2', '&lt;p&gt;\r\n	答：\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	fget()这不是一个PHP函数，会引致执行错误&lt;br /&gt;\r\nfile_open()这不是一个PHP函数，会引致执行错误。&lt;br /&gt;\r\nfopen()这是正确答案，fopen()可以用来开启档案以便读写。&lt;br /&gt;\r\nopen_file()这不是一个PHP函数，会引致执行错误。\r\n&lt;/p&gt;', '1', '2016-01-28 10:32:41');
INSERT INTO `problems` VALUES ('117', 'PHP如何实现页面跳转', '', '3', '1', '2', '[\"\"]', '方法一：PHP函数跳转。缺点，header偷之前不能有输出，跳转后的程序继续执行，可用exit中断执行后面的程序&lt;br /&gt;\r\nheader(&quot;Location:网址&quot;);//直接跳转&lt;br /&gt;\r\nheader(&quot;refresh:3;url=http://www.baidu.com&quot;);//三秒后跳转&lt;br /&gt;\r\n&lt;br /&gt;\r\n方法二:利用meta&lt;br /&gt;\r\necho &quot;&amp;lt;meta http-equiv=refresh content=\'0;url=网址\'&amp;gt;&quot;;&lt;br /&gt;', '', '1', '2016-01-28 10:37:52');
INSERT INTO `problems` VALUES ('118', '请写一个函数验证电子邮件的格式是否正确(要求使用正则)', '', '3', '1', '2', '[\"\"]', 'preg_match(\'/^[\\w\\-\\.]+@[\\w\\-]+(\\.\\w+)+$/\',$email);', '', '1', '2016-01-28 10:41:41');
INSERT INTO `problems` VALUES ('119', '请对POSIX风格和兼容Perl风格两种正则表达式的主要函数进行类比说明 主要区别有一下三种:', '', '3', '1', '2', '[\"\"]', '1) preg_replace()里面的正则可以写成型如:&quot;/.xxx/&quot;而ereg_replace()里面的正则需写成形如&quot;xxx&quot;&lt;br /&gt;\r\n2) preg_replace()能操作数组，而ereg_replace()不可以&lt;br /&gt;\r\n3) 在逆向引用用preg_replace()可使用0-99个，而ereg_repalce(0最多为9个使用Perl兼容正则表达式语法的preg_match()函数通常是比ereg()更快的替代方案.&lt;br /&gt;', '', '1', '2016-01-28 10:46:45');
INSERT INTO `problems` VALUES ('120', '请写出并说明如何在命令行下运行PHP脚本(写出两边方式)同时向PHP脚本传递参数', '', '3', '1', '2', '[\"\"]', '首先进入php安装目录&lt;br /&gt;\r\nphp -f d:/wamp/www/1.php 其中-f参数指定要执行的php文件&lt;br /&gt;\r\nphp -r phpinfo();	其中-r 表示执行php代码，无需写开始结束标记&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '', '1', '2016-01-28 10:52:24');
INSERT INTO `problems` VALUES ('121', '使用正则表达式提取一段标识语言(html或xml)代码段中指定标签的指定属性值(需考虑属性值对不规则的情况，如大小写不敏感，属性名值与等号间有空格等) 。此处假设需提取test标签的attr属性值，请自行构建包含该标签的串', '', '3', '1', '2', '[\"\"]', '编写如下函数:&lt;br /&gt;\r\nfunction getAttrValue($str,$tagName,$attrName){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $pattern1 = &quot;/&amp;lt;&quot;.$tagName.&quot;(\\\\s+\\\\w+\\s*=\\\\s*([\\\\\'\\\\\\&quot;]?)([^\\\\\'\\\\\\&quot;]*)&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; (\\\\2))*\\\\s+&quot;.$attName.&quot;\\\\s*=\\\\s*([\\\\\'\\\\\\&quot;]?)([^\\\\\'\\\\\\&quot;]*)(\\\\5)&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; (\\\\s+\\\\w+\\\\s*=\\\\s*([\\\\\'\\\\\\&quot;]?)([^\\\\\'\\\\\\&quot;]*)(\\\\9)*\\\\s*&amp;gt;/i&quot;;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr = array();&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $re = preg_replace($pattern1,$str,$arr);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if($re){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo &quot;&amp;lt;br/&amp;gt;\\$arr[6]={$arr[6]}&quot;;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }else{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo &quot;&amp;lt;br/&amp;gt;没找到&quot;;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\n测试:&lt;br /&gt;\r\n$str1 = &quot;&amp;lt;test attr=\'ddd\'&amp;gt;&quot;;&lt;br /&gt;\r\ngetAttrValue($str1, \'test\', \'attr\');//找test标签中attr属性的值，结果为ddd&lt;br /&gt;\r\n$str2 = &quot;&amp;lt;test2 attr=\'ddd\' attr2=\'ddd2\' t1=\\&quot;t1 value\\&quot; t2=\'t2 vlaue\'&amp;gt;&quot;;&lt;br /&gt;\r\ngetAttrValue($str2,&quot;test2&quot;,&quot;t1&quot;);//找test2标签中t1属性的值，结果为t1 value&lt;br /&gt;', '', '1', '2016-01-28 11:14:48');
INSERT INTO `problems` VALUES ('122', 'what does the following code do? Explain what\'s going on there.$data=\'08/26/2003\';print ereg_replace(&quot;([0-9]+)/([0-9]+)/([0-9]+)&quot;,\\\\2/\\\\1/\\\\3,$data);', '', '3', '1', '2', '[\"\"]', '这是把一个日期从MM/DD/YYYY的格式转为DD/MM/YYYY格式.&lt;br /&gt;\r\n输出26/08/2003&lt;br /&gt;', '', '1', '2016-01-28 11:23:54');
INSERT INTO `problems` VALUES ('123', 'what function would you use to redirect the browser to a new page', '', '1', '1', '2', '[\" redir()\",\"header()\",\"location()\",\"redirect()\"]', '1', '&lt;p&gt;\r\n	答：\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	redir()这不是一个PHP函数，会引致执行错误\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	header()这个是正确答案，header()函数发送头信息，可以用来使浏览器转向到另一个页面，例如：header(&quot;Location:http://www.search-this.com&quot;)。&lt;br /&gt;\r\nlocation()这不是一个PHP函数，会引致执行错误。&lt;br /&gt;\r\nredirect()这不是一个PHP函数，会引致执行错误。\r\n&lt;/p&gt;', '1', '2016-01-28 11:29:42');
INSERT INTO `problems` VALUES ('124', 'when turned on ____will _____your script with different variables from HTMLforms and cookies.', '', '1', '1', '2', '[\"show_errors,enable\",\"show_errors,show\",\"register_globals,enhance\",\"register_globals,inject\"]', '2', '', '1', '2016-01-28 14:09:46');
INSERT INTO `problems` VALUES ('125', '一个函数的参数不能对变量的引用，除非在php.ini中把____设为on', '', '3', '1', '2', '[\"\"]', 'allow_call_time_pass_reference&lt;br /&gt;\r\n是否启用在函数调用时强制参数被按照引用传递&lt;br /&gt;', '', '1', '2016-01-28 14:11:45');
INSERT INTO `problems` VALUES ('126', '在HTML语言中，页面头部的meta标记可以用来输出文件的编码格式，以下是一个标准的meta语句&lt;meta http-equiv=\'content-Type\' content=&quot;text/html;charset=gbk&quot;&gt;,请使用PHP语言写一个函数，把一个标准HTML页面中的类似meta标记中的charset部分值改为big5', '', '3', '1', '2', '[\"\"]', '请注意:&lt;br /&gt;\r\n(1)余姚处理完整的html页面，即不光此meta语句&lt;br /&gt;\r\n(2)忽略大小写&lt;br /&gt;\r\n(3)“和”在此处是可以互换的&lt;br /&gt;\r\n(4)\'Conten-Type\'两侧的引号是可以忽略的，但\'text/html;charset=gbk\'两侧的不行&lt;br /&gt;\r\n(5)注意处理多余空格&lt;br /&gt;\r\n编写正则表达式如下:&lt;br /&gt;\r\n$res1 = &quot;/(&amp;lt;meta\\\\s*http-equiv\\\\s*=\\\\s*([\'\\&quot;]?)Content-Type(\\\\2)\\\\s*content\\\\s*=\\\\s*([\'\\&quot;])text\\/html;charset=)(UTF-8)(\\\\4)(\\\\s*\\/?&amp;gt;)/i&quot;&lt;br /&gt;', '', '1', '2016-01-28 14:21:33');
INSERT INTO `problems` VALUES ('127', 'PHP中，如何获得一个数组的键值', '', '3', '1', '2', '[\"\"]', '使用key()可以获得数组中当前元素的键名，使用current()则可以返回当前元素的值。使用array_keys()则可以得到数组中所有的键名。使用foreach结构foreach($arr as $key=&amp;gt;$value)可以通过$key和$value分别获取键名和值', '', '1', '2016-01-28 14:25:01');
INSERT INTO `problems` VALUES ('128', '哪个选项会匹配下边的这个正则表达式', '(/.*\\*xyz\\d/)', '1', '3', '2', '[\"******xyz\",\"*****_xyz1\",\"******xyz2\",\"_*xyz\"]', '2', '', '1', '2016-01-28 14:27:51');
INSERT INTO `problems` VALUES ('129', '以下哪个错误无法被标准的错误控制器获取', '', '1', '1', '2', '[\"E_WAENING\",\"E_USER_ERROR\",\"E_PARSE\",\"E_NOTICE\"]', '1', '', '1', '2016-01-28 14:29:17');
INSERT INTO `problems` VALUES ('130', '以下那种错误类型无法被自定义错误处理器捕捉到', '', '1', '1', '2', '[\"E_WAENING\",\"E_USER_ERROR\",\"E_PARSE\",\"E_NOTICE\"]', '2', '', '1', '2016-01-28 14:30:34');
INSERT INTO `problems` VALUES ('131', '(^\\s*)|(\\s*$)这个正则表达式作用是：', '', '3', '1', '2', '[\"\"]', '匹配以0个或多个空白符开头或者0个或多个空白符结尾的字符串', '', '1', '2016-01-28 14:32:39');
INSERT INTO `problems` VALUES ('132', '在很多时候，我们可以通过apache的主配置文件来设置对test目录的访问权限控制，如http://IP/test请问如果需设置test下的一个子目录的访问控制权限，是否可以在主配置文件中修改，如果不可以应如何解决。', '', '3', '1', '2', '[\"\"]', '可以，还可以在需要控制的子目录下创建.htaccess文件，写入访问控制。', '', '1', '2016-01-28 14:36:19');
INSERT INTO `problems` VALUES ('133', '如果我的网站用的utf-8编码，为防止乱码出现，都需要注意哪些地方', '', '3', '1', '2', '[\"\"]', '从以下几方面考虑：&lt;br /&gt;\r\n1) 数据库中库和表都用utf8编码&lt;br /&gt;\r\n2) php连接mysql，指定数据库编码为utf8 mysql_query(&quot;set names utf8&quot;);&lt;br /&gt;\r\n3) php文件指定头部编码为utf-8header(&quot;content-type:text/html;charset=utf-8&quot;);&lt;br /&gt;\r\n4) 网站下所有文件的编码为utf8&lt;br /&gt;\r\n5) html文件指定编码为utf-8&amp;lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;/&amp;gt;&lt;br /&gt;', '', '1', '2016-01-28 14:40:34');
INSERT INTO `problems` VALUES ('134', '在url中用get传值的时候，若中文出现乱码，应该用哪个函数对中文编码', '', '3', '1', '2', '[\"\"]', 'urlencode()', '', '1', '2016-01-28 14:56:05');
INSERT INTO `problems` VALUES ('135', '写出两种对变量加密的函数', '', '3', '1', '2', '[\"\"]', 'md5($str);&lt;br /&gt;\r\nsha1($str);&lt;br /&gt;', '', '1', '2016-01-28 14:56:51');
INSERT INTO `problems` VALUES ('136', '如果需要原样输出用户输入的内容，在数据入库前，要用那个函数处理', '', '3', '1', '2', '[\"\"]', 'htmlspecialchars或者htmlentities', '', '1', '2016-01-28 14:58:22');
INSERT INTO `problems` VALUES ('137', '写出五种以上你使用过的PHP的拓展的名称(提示：常用的PHP拓展)', '', '3', '1', '2', '[\"\"]', 'mb_string、iconv、curl、GD、XML、socket、MySQL、PDO等', '', '1', '2016-01-28 15:00:38');
INSERT INTO `problems` VALUES ('138', '了解MVC模式吗？请写出三种以上目前PHP流行的MVC框架名称(不区分大小写)', '', '3', '1', '2', '[\"\"]', 'FleaPHP、ZendFramework、CakePHP、Symfony、ThinkPHP、YII、CodeIgniter等', '', '1', '2016-01-28 15:03:50');
INSERT INTO `problems` VALUES ('139', 'PHP中WEB上传文件的原理是什么，如何限制上传文件的大小', '', '3', '1', '2', '[\"\"]', '上传文件的表单使用post方式，并且要在form中添加enctype=\'multipart/form-data\'。一般可以加上隐藏域:&amp;lt;input type=hidden name=\'MAX_FILE_SIZE\' value=dddddd&amp;gt;,位置在 file 域前面。 value 的值是上传文件的客户端字节限制。可以避免用户在花时间等待上传大文件之后才发现文件过大上传失败的麻烦。&lt;br /&gt;\r\n使用 file 文件域来选择要上传的文件，当点击提交按钮之后，文件会被上传到服务器中的临时目录，在脚本运行结束时会被销毁，所以应该在脚本结束之前，将其移动到服务器上的某个目录下，可以通过函数 move_uploaded_file()来移动临时文件，要获取临时文件的信息，使用$_FILES。&lt;br /&gt;\r\n限制上传文件大小的因素有：&lt;br /&gt;\r\nl) 客户端的隐藏域 MAX_FILE_SIZE的数值(可以被绕开)。&lt;br /&gt;\r\n2) 服务器端的 upload_max_filesize,post_max_size 和 memory_limit。这几项不能够用脚本来设置。&lt;br /&gt;\r\n3）自定义文件大小限制逻辑。即使服务器的限制是能自己决定，也会有需要个别考虑的情况。所以这个限制方式经常是必要的。&lt;br /&gt;', '', '1', '2016-01-28 15:12:01');
INSERT INTO `problems` VALUES ('140', '简述 UBB code的实现原理', '', '3', '1', '2', '[\"\"]', 'UBB 代码是 HTML 的一个变种，通过程序自定义我们的标签， 比如“[a]PHP中UBB 的使用 [/a] ”这样的标签，其实质就是查找[a][/a]标签，将其替换成&amp;lt;a&amp;gt;&amp;lt;/a&amp;gt;的标准html，说白了，就是将标准的 html 标记通过技术手段使其简化，其输出出来的结果还是标准的 html 。&lt;br /&gt;\r\n明白了 ubb 的原理，那么再制作一个简单的 ubb 编辑器就不难了，和 fck 之类的编辑器比较起来,ubb代码最大的优点就是代码简单，功能很少，简单的ubb只需要一个文件，而且ubb标签可以自己来定义，更改起来很方便，在php中就是利用替换函数就可以将html进行标签化，输出时进行标签的转化。&lt;br /&gt;', '', '1', '2016-01-28 15:19:47');
INSERT INTO `problems` VALUES ('141', '怎么把文件保存到指定目录？怎么避免上传文件重名问题', '', '3', '1', '2', '[\"\"]', '可以自己设置上传文件的保存目录，与文件名拼凑形成一个文件路径，使用 move_uploaded_file()，就可以完成将文件保存到指定目录。可以通过上传的文件名获取到文件后缀，然后使用时间戳＋随机数＋文件后缀的方式为文件重新命名，这样就避免了重名。', '', '1', '2016-01-28 15:20:19');
INSERT INTO `problems` VALUES ('142', '__函数能返回脚本里的任意行中调用的函数的名称。该函数同事还经常被用在调试中，用来判断错误是如何发生的', '', '3', '1', '2', '[\"\"]', 'debug_print_backtrace()', '', '1', '2016-01-28 15:24:52');
INSERT INTO `problems` VALUES ('143', '在smarty模板预发中怎么能遍历数组$a = array(array(\'id\'=&gt;0),array(\'id\'=&gt;1),array(\'id\'=&gt;2),.......)id=&gt;0-10000,怎么判断当id=&gt;500,让输出的值在HTML里变为红色', '', '3', '1', '2', '[\"\"]', '设数组分配过来的数组名为$ids&lt;br /&gt;\r\n{section name = temp loop = $ids}&lt;br /&gt;\r\n{if $ids[temp].id == 500}&lt;br /&gt;\r\n&amp;lt;span style=\'color:#f00;\'&amp;gt;{$ids[temp].id}&amp;lt;/span&amp;gt;&lt;br /&gt;\r\n{else}&lt;br /&gt;\r\n{$ids[temp].id}&lt;br /&gt;\r\n{/if}&lt;br /&gt;\r\n{/section}&lt;br /&gt;', '', '1', '2016-01-28 15:30:15');
INSERT INTO `problems` VALUES ('144', '在smarty模板语法中如何获取当前时间，并且使用Y-m-d H:i:s的格式输出', '', '3', '1', '2', '[\"\"]', '使用{$smarty.now}来获取当前时间，得到的是unix系统时间戳&lt;br /&gt;\r\n使用变量器进行格式化，如果：&lt;br /&gt;\r\n{$smarty.now|date_format:&quot;%Y-%m-%d %H:%M:%S&quot;}&lt;br /&gt;', '', '1', '2016-01-28 15:35:27');
INSERT INTO `problems` VALUES ('145', '在smarty模板语法中如何获取php的全部环境变量', '', '3', '1', '2', '[\"\"]', '$smarty.get.变量	#显示通过get方式传过来的指定变量的值&lt;br /&gt;\r\n$smarty.post.变量	#显示通过post方式传过来的指定变量的值&lt;br /&gt;\r\n$smarty.cookies.变量	#显示通过cookie中指定变量的值&lt;br /&gt;\r\n$smarty.server.SERVER_NAME	#显示server变量值，$_SERVER系列变量&lt;br /&gt;\r\n$smarty.env.PATH	#显示系统环境变量值，$_ENV系列变量&lt;br /&gt;\r\n$smarty.session.变量	#显示session中指定变量的值&lt;br /&gt;\r\n$smarty.request.变量	#显示通过post、get、cookie中指定变量的值&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '', '1', '2016-01-28 15:45:12');
INSERT INTO `problems` VALUES ('146', '在Smarty模板中如何用自定义函数', '', '3', '1', '2', '[\"\"]', '使用模板风格包含，传递参数则使用HTML属性的方式，例如：&lt;br /&gt;\r\n{html_image file=&quot;pumpkin.jpg&quot;}&lt;br /&gt;', '', '1', '2016-01-28 15:50:57');
INSERT INTO `problems` VALUES ('147', '列举出你所知道的php系统函数库例如，数学函数库', '', '3', '1', '2', '[\"\"]', 'mysql,gd,pdo,XML,zip,filesystem,mail等', '', '1', '2016-01-28 15:53:13');
INSERT INTO `problems` VALUES ('148', '假如让你来写一个函数实现utf-8转gb2312，那么函数的名称应该怎么命名', '', '3', '1', '2', '[\"\"]', 'utf8_to_gb2312或许utf8togb2312', '', '1', '2016-01-28 15:53:40');
INSERT INTO `problems` VALUES ('149', '请描述如下URL重写规则的用意', '&amp;lt;IfModulemod_rewrite.c&amp;gt;&lt;br /&gt;\r\nRewriteEngineon&lt;br /&gt;\r\nRewriteCond%{REQUEST_FILENAME}!-f&lt;br /&gt;\r\nRewriteCond%{REQUEST_FILENAME}!-d&lt;br /&gt;\r\nRewriteBase/&lt;br /&gt;\r\nRewriteRule./index.php[L]&lt;br /&gt;\r\n&amp;lt;/IfModule&amp;gt;&lt;br /&gt;', '3', '1', '2', '[\"\"]', '如果REQUEST_FILENAME文件存在，就直接访问文件，不进行下面的rewrite规则，如果REQUEST_FILENAME目录存在，就直接访问目录，不进行下面的rewrite规则，&lt;br /&gt;\r\nRewriteRule.index.php[L]的意思是把所有的请求都给index.php处理&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '', '1', '2016-01-28 15:59:05');
INSERT INTO `problems` VALUES ('150', 'Warning:Cannot modify header information-headers already sent by (output started at D:\\src\\init.php:7) in D:\\src\\init.php on line 10通常什么情况下php会报该警告信息', '', '3', '1', '2', '[\"\"]', '一般是在header、set_cookie以及session_start函数前面有输出(包括空格)的情况下，会报该警告信息。', '', '1', '2016-01-28 16:03:19');
INSERT INTO `problems` VALUES ('151', '使对象可以像数组一样进行foreach循环，要求属性必须是私有。(Iterator 模式的PHP5实现，写一类实现Iterator接口）', '', '3', '3', '5', '[\"\"]', 'class Test implements Iterator{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; private $item = array(&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; \'id\'=&amp;gt;1,&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; \'name\'=&amp;gt;\'php\'&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; )&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; public function rewind(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; reset($this-&amp;gt;item);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; public function current(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return current($this-&amp;gt;item);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; public function key(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return key($this-&amp;gt;item);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; public function next(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return next($this-&amp;gt;item);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; public function valid(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return($this-&amp;gt;current()!==false);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//测试&lt;br /&gt;\r\n$t = new Test;&lt;br /&gt;\r\nforeach ($t as $k =&amp;gt; $v) {&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; echo $k,\'---&amp;gt;\',$v,\'&amp;lt;br/&amp;gt;\';&lt;br /&gt;\r\n}&lt;br /&gt;', '', '1', '2016-01-28 16:12:37');
INSERT INTO `problems` VALUES ('152', '用PHP实现一个双向队列', '', '3', '1', '5', '[\"\"]', 'class Deque{&lt;br /&gt;\r\nprivate $queue = array();&lt;br /&gt;\r\npublic function addFirst($item){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return array_unshift($this-&amp;gt;queue,$item);&lt;br /&gt;\r\n}&lt;br /&gt;\r\npublic function addLast($item){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return array_push($this-&amp;gt;queue, $item)；&lt;br /&gt;\r\n}&lt;br /&gt;\r\npublic function removeFirst(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return array_shift($this-&amp;gt;queue);&lt;br /&gt;\r\n}&lt;br /&gt;\r\npublic function removeLast(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return array_pop($this-&amp;gt;queue);&lt;br /&gt;\r\n}&lt;br /&gt;\r\n}&lt;br /&gt;', '', '1', '2016-01-28 16:17:51');
INSERT INTO `problems` VALUES ('153', '写出一种排序算法(要写出代码)，并说出优化它的方法', '', '3', '1', '5', '[\"\"]', 'function partition(&amp;amp;$arr,$low,$high){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $pivotkey = $arr[$low];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; while($low&amp;lt;$high){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; while($low&amp;lt;$high &amp;amp;&amp;amp; $arr[$high]&amp;gt;=$pivotkey){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $high--;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $temp = $arr[$low];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $arr[$low] = $arr[$high];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $arr[$high] = $temp;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; while($low&amp;lt;$high &amp;amp;&amp;amp; $arr[$low] &amp;lt;=$pivotkey){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $low++;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $temp = $arr[$low];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $arr[$low] = $arr[$high];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $arr[$high] = $temp;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $low;&lt;br /&gt;\r\n}&lt;br /&gt;\r\nfunction quick_sort(&amp;amp;$arr,$low,$high){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if($low &amp;lt; $high){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $pivot = partition($arr,$low,$high);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; quick_sort($arr,$low,$pivot-1);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; quick_sort($arr,$pivot+1,$high);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;', '该算法是通过分治递归来实现的，其效率很大程度上取决于参考元素的选择，可以选择数组的中间元素，也可以随机得到三个元素，然后选择中间的那个元素（三数中值法）。&lt;br /&gt;\r\n另外还有一点，就是当我们在分割时，如果分割出来的子序列的长度很小的话（小于5到20），通常递归的排序的效率就没有诸如插入排序或希尔排序那么快了。因此可以会去判断数组的长度，如果小于10的话，直接用插入排序，而不在递归调用这个快速排序。&lt;br /&gt;', '1', '2016-01-28 16:42:22');
INSERT INTO `problems` VALUES ('154', '写一个二维数组排序算法函数，能够具有通用性，可以调用php内置函数', '', '3', '1', '5', '[\"\"]', '&lt;p&gt;\r\n	//二维数组排序，$arr是数据，$keys是排序的简直,$order是排序规则，1是降序，0是升序\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	function array_sort($arr,$keys,$order=0){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if(!is_array($arr)){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return false;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $keyvalue = array();&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; foreach ($arr as $key =&amp;gt; $val) {&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $keysvalue[$key] = $val[$keys];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if($order == 0){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; asort($keysvalue);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }else{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; arsort($keysvalue);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; reset($keysvalue);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; foreach($keysvalue as $key =&amp;gt; $vals){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $keysvalue[$key] = $key;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $new_array = array();&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; foreach ($keysort as $key =&amp;gt; $val) {&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $new_array[$key] = $arr[$val];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $new_array;&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//测试&lt;br /&gt;\r\n$person = array(&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'id\'=&amp;gt;2,\'name\'=&amp;gt;\'zhangsan\',\'age\'=&amp;gt;23),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'id\'=&amp;gt;5,\'name\'=&amp;gt;\'lisi\',\'age\'=&amp;gt;28),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'id\'=&amp;gt;3,\'name\'=&amp;gt;\'apple\',\'age\'=&amp;gt;17)&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; );&lt;br /&gt;\r\n$result = array_sort($person,\'name\',1);&lt;br /&gt;\r\nprint_r($result);&lt;br /&gt;\r\n&lt;/p&gt;', '', '1', '2016-01-28 16:56:58');
INSERT INTO `problems` VALUES ('155', '用二分法查找一个长度为10的排好序的线性表，查找不成功时最多需要比较次数是', '', '2', '1', '5', '[\"\"]', '4', '', '1', '2016-01-28 16:59:44');
INSERT INTO `problems` VALUES ('156', '从0,1,2,3,4,5,6,7,8,9，这十个数字中任意选出三个不同的数字，“三个数字中不含0和5”的概率是', '', '2', '1', '5', '[\"\"]', '7/15', '', '1', '2016-01-28 17:01:24');
INSERT INTO `problems` VALUES ('157', '一个三角形三个顶点有三只老鼠，一声枪响，3只老鼠开始沿三角形的边匀速运动，请问他们相遇的概率是', '', '2', '1', '5', '[\"\"]', '75%', '每只老鼠都有顺时针、逆时针两种运动方向，3只老鼠共有8种运动情况，只有当3只老鼠都为顺时针或者逆时针，他们才不会相遇，剩余的6种情况都会相遇，故相遇的概率为6/8 = 75%', '1', '2016-01-28 17:06:00');
INSERT INTO `problems` VALUES ('158', '我们希望开发一款扑克游戏，请给出一套洗牌算法，公平的洗牌并将洗好的牌存储在一个整形数组里', '', '3', '1', '5', '[\"\"]', '$card_num = 45;//牌数&lt;br /&gt;\r\nfunction wash_card($card_num){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $cards = $tmp = array();&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; for($i=0;$i&amp;lt;$card_num;$i++){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $tmp[$i]=$i;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; for($i=0;$i&amp;lt;card_num;$i++){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $index = rand(0,$card_num-$i-1);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $cards[$i] = $tmp[$index];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; unset($tmp[$index];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $tmp = array_values($tmp);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $cards;&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//测试:&lt;br /&gt;\r\nprint_r(wash_card($card_num));&lt;br /&gt;', '', '1', '2016-01-28 17:12:17');
INSERT INTO `problems` VALUES ('159', '写出你所知道的排序方法', '', '3', '1', '5', '[\"\"]', '冒泡排序，快速排序，插入排序，选择排序&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '', '1', '2016-01-28 17:13:11');
INSERT INTO `problems` VALUES ('160', '禁用cookie后session还能用吗', '', '3', '1', '2', '[\"\"]', '可以，cookie和session都是用来实现会话机制的，由于http协议是无状态的，所以要想跟踪一个用户在同一个网站之间不同页面的状态，需要有这么一个机制---会话机制。&lt;br /&gt;\r\ncookie：将会话的信息保存到浏览器端。&lt;br /&gt;\r\nsession:将会话信息保存到服务器端。&lt;br /&gt;\r\nession默认情况下是基于cookie的，对于session来说，每生成一个sessionid,都会将其发送到浏览器端，然后将其保存到cookie当中。&lt;br /&gt;\r\n如果禁用了cookie,则基于cookie的session不好使了，我们可以使用get,传递sid，或者直接开启透明的sid（此时需要关闭基于cookie的session配置项）&lt;br /&gt;', '', '1', '2016-01-28 17:37:21');
INSERT INTO `problems` VALUES ('161', '请使用socket 相关函数（非curl）实现如下功能：构造一个post请求，发送到指定http server 的指定端口的指定请求路径（如http://www.example.comm:8080/test）。请求中包含以下变量:', '用户名（username) ：温柔一刀&lt;br /&gt;\r\n密码（pwd): &amp;amp;123=321&amp;amp;321=123&amp;amp;&lt;br /&gt;\r\n个人简介(intro): Hello world !&lt;br /&gt;\r\n且该http server需要以下cookie来进行简单的用户动作跟踪:&lt;br /&gt;\r\ncur_query:you&amp;amp;me&lt;br /&gt;\r\nlast_tm:...(上次请求的unix时间戳，定为当前请求时间前10分钟)&lt;br /&gt;\r\ncur_tm:...(当前请求的unix时间戳）&lt;br /&gt;\r\n设置超时为10秒，发出请求后，将http server的响应内容输出&lt;br /&gt;', '3', '1', '2', '[\"\"]', 'if($fp=fsockopcn(\'localhost\',\'80\')){&lt;br /&gt;\r\n&amp;nbsp;//连接成功&lt;br /&gt;\r\n$request_data=&quot;POST /2.php HTTP/1.1&quot;.&quot;\\r\\n&quot;;// 请求行&lt;br /&gt;\r\n$request_data=&quot;Host:localhost&quot;.&quot;\\r\\n&quot;;//host 头信息&lt;br /&gt;\r\n$request_data=&quot;User-Agent:Mozilla/5.0(compatible;MSIE9.0;Windows NT 6.1; Trident/5.0)&quot;.&quot;\\r\\n&quot;;//host头信息&lt;br /&gt;\r\n$request_content = &quot;username =&quot;.urlencode(\'温柔一刀\'). &quot;&amp;amp;pwd=&quot;. urlencode(\'&amp;amp;123=321&amp;amp;321 = 123 &amp;amp;\').&quot;&amp;amp;intro=&quot;.urlencode(&quot;Hello world!&quot;);&lt;br /&gt;\r\n$request_data.=&quot;Content-TyPe:application/x-www-form-urlencoded&quot;.&quot;\\r\\n&quot;;&amp;nbsp;&lt;br /&gt;\r\n$request_data.=&quot;Content-Length:&quot;.strlen($request_content).\'\\r\\n\';&lt;br /&gt;\r\n$cur_query = urlencode(&quot;you&amp;amp;me&quot;);&lt;br /&gt;\r\n$last_tm = time()-10*60;&lt;br /&gt;\r\n$cur_tm = time();&lt;br /&gt;\r\n$request_data.=&quot;Cookie:cur_query=$cur_query;last_tm=$last_tm;cur_tm=$cur_tm&quot;.&quot;\\r\\n&quot;;&lt;br /&gt;\r\n$request_data.=&quot;\\r\\n&quot;;//请求头信息结束时的空行&lt;br /&gt;\r\n//请求主题数据部分&lt;br /&gt;\r\n$request_data.=$request_content;&lt;br /&gt;\r\n//利用建立好的通道，将数据发送过去&lt;br /&gt;\r\nfwrite($fp,$request_data);//写入数据(发送数据)&lt;br /&gt;\r\n//读取数据&lt;br /&gt;\r\nwhile(!feof($fp)){//判断是否没有到文件末尾&lt;br /&gt;\r\n$resp_data = fgets($fp);&lt;br /&gt;\r\necho $resp_data.\'&amp;lt;br&amp;gt;\';&lt;br /&gt;\r\n&amp;nbsp;}&lt;br /&gt;\r\n}&lt;br /&gt;', '', '1', '2016-01-29 09:19:16');
INSERT INTO `problems` VALUES ('162', '在HTTP1.0中，状态码401的含义是______;如果返回“找不到文件”的提示，则可用header函数，其语句为_______;', '', '3', '1', '2', '[\"\"]', '未经授权：访问由于凭据无效被拒绝&lt;br /&gt;\r\nheader(&quot;HTTP/1.0 404 Not Found&quot;)&lt;br /&gt;', '', '1', '2016-01-29 10:13:36');
INSERT INTO `problems` VALUES ('163', '如何修改session的生存时间', '要注意这里的生存时间指的是什么？由于session默认是基于cookie的，也就是说使用session会话技术，首先是将session数据保存到服务器端，其次会将sessionID保存到浏览器端，保存在服务器端的session文件生命周期由php.ini中的session.gc_maxlifetime、gc_probability和fc_divisor来决定，而保存在客户端的sessionID由客户端cookie来决定，默认其生存周期直到浏览器关闭，它也可以通过php.ini中的设置session.cookie_lifetime来控制，二者共同来决定session的生存时间，二者中的其中任意一个失效了，就会造成session失效，要根据自己的需求来决定是要从哪方面来修改其生存时间。', '3', '1', '2', '[\"\"]', '参考1：将php.ini中的session.gc_maxlifetime设置为9999重启apache&lt;br /&gt;\r\n参考2：&lt;br /&gt;\r\n$savePath = &quot;./session_save_dir&quot;;&lt;br /&gt;\r\n$lifeTime = 小时*秒;&lt;br /&gt;\r\nsession_save_path($savePath);&lt;br /&gt;\r\nsession_set_cookie_params($lifeTime);&lt;br /&gt;\r\nsession_start();&lt;br /&gt;\r\n参考3：&lt;br /&gt;\r\nsession_start();&lt;br /&gt;\r\n$lifeTime = 24*3600;//保存一天&lt;br /&gt;\r\nsetcookie(session_name(),session_id(),time()+$lifeTime,&quot;/&quot;);&lt;br /&gt;', '', '1', '2016-01-29 10:34:43');
INSERT INTO `problems` VALUES ('164', 'How can you get round the stateless nature of HTTP using PHP', '', '3', '1', '2', '[\"\"]', '最主要的两个选择是SESSION和COOKIE。使用SESSION的方法是在每一页的开始加session_start(),然后利用$_SESSSION来存取SESSION变量。至于COKKIE你只需要记着一个原则:在输出任何文字之前调用set_cookie()函数设置COOKIE,使用$_COOKIE获取COOKIE变量', '', '1', '2016-01-29 10:37:50');
INSERT INTO `problems` VALUES ('165', 'PHP程序中如何设置当前页面的编码为utf-8', '', '3', '1', '2', '[\"\"]', 'header(&quot;content-type:text/html;charset=utf-8&quot;);', '', '1', '2016-01-29 10:40:08');
INSERT INTO `problems` VALUES ('166', '如何设置一个cookie的名字为username，值为jack，并且让此cookie一周后失效', '', '3', '1', '2', '[\"\"]', 'setcookie(\'username\',\'jack\'),time()+7*24*3600;', '', '1', '2016-01-29 10:40:38');
INSERT INTO `problems` VALUES ('167', '一个浏览器最多产生多少个cookie，每个cookie文件最大不能超过多少', '', '3', '1', '2', '[\"\"]', 'cookie的总数量没有限制，但是每个域名的COOKIE数量和每个COOKIE的大小是有限制的！&lt;br /&gt;\r\nIE每个域名限制为50个。&lt;br /&gt;\r\nFirefox每个域名cookie限制为50个。&lt;br /&gt;\r\nOpera每个域名cokie限制为30个。&lt;br /&gt;\r\nSafari/webkie貌似没有cookie限制。但是加入cookie很多，则会使header大小超过服务器的处理的限制，会导致错误发生。&lt;br /&gt;\r\n不同浏览器间每个cookie文件大小也不同&lt;br /&gt;\r\nFirefox和safari是4097个字节，包括名（name）、值（value）和等号。&lt;br /&gt;\r\nOpera是4096个字节，包括：名（name）、值（value）和等号。&lt;br /&gt;\r\nIE是4095个字节，包括：名（name）、值（value）和等号。&lt;br /&gt;', '', '1', '2016-01-29 10:48:02');
INSERT INTO `problems` VALUES ('168', '设置或读取session之前，需要做什么', '', '3', '1', '2', '[\"\"]', 'session_start()前面不能有任何输出，包括空行。', '', '1', '2016-01-29 10:50:01');
INSERT INTO `problems` VALUES ('169', '请描述出七层网络模型的名称，由下到上(可以使用中文描述)', '', '3', '1', '7', '[\"\"]', '物理层、数据链路层、网络层、传输层、会话出、表示层、应用层', '', '1', '2016-01-29 10:53:16');
INSERT INTO `problems` VALUES ('170', '说说下面这些协议的全称和中文解释(提示:都是工作在应用层)SMTP、POP3、HTTP、FTP、DNS', '', '3', '1', '7', '[\"\"]', 'SMTP(Simple Mail Transfer Protocol)简单邮件传输协议&lt;br /&gt;\r\nPOP3(Post Office Protocol 3)邮局协议第3版&lt;br /&gt;\r\nHTTP(Hypertext Transfer Protocol)超文本传输协议&lt;br /&gt;\r\nFTP(File Transfer Protocol)文件传输协议&lt;br /&gt;\r\nDNS(Domain Name System and Domain Name Service protocol)域名系统(服务)协议&lt;br /&gt;', '', '1', '2016-01-29 10:58:40');
INSERT INTO `problems` VALUES ('171', 'COOKIE、SESSION的联系和区别，多台web服务器如何共享SESSION', '', '3', '1', '7', '[\"\"]', 'COOKIE和SESSION都是用于绘画机制，COOKIE保存在客户端，而SESSION则保存在服务器端。在默认情况下，SESSION机制是基于COOKIE的，每生成一个SESSIONID，都会将其发送到浏览器端，让后将其保存到COOKIE当中，在下次请求的时候，有浏览器携带这个COOKIE。&lt;br /&gt;\r\n要想多台web服务器共享SESSION，可以利用MySQL数据库存储SESSION数据。&lt;br /&gt;', '', '1', '2016-01-29 11:02:52');
INSERT INTO `problems` VALUES ('172', 'HTTP/1.0中，状态码200 301 304 403 404 500 的含义', '', '3', '1', '7', '[\"\"]', '200 OK 服务器成功处理了请求&lt;br /&gt;\r\n301 Moved Permanently(重定向)请求的URL已移走&lt;br /&gt;\r\n304 Not Modified(未修改)客户的缓存资源是最新的，要客户端使用缓存&lt;br /&gt;\r\n403 Forbidden（禁止）请求被服务器拒绝了&lt;br /&gt;\r\n404 Not Found 未找到资源&lt;br /&gt;\r\nInternal Server Error(内部服务器错误)服务器遇到一个错误，使其无法为请求提供服务&lt;br /&gt;', '', '1', '2016-01-29 11:06:59');
INSERT INTO `problems` VALUES ('173', '请描述PHP(或其他语言)Session的运行机制，大型网站中Session方面应注意什么', '', '3', '1', '7', '[\"\"]', 'session机制是一种服务器端的机制，它将数据保存到服务器端。&lt;br /&gt;\r\n当程序需要为某个客户端的请求创建一个session的时候，服务器首先检查这个客户端的请求里是否已包含一个session标识，称为sessionid，如果已包含一个sessionid则说明以前已经为此客户端创建过session，服务器就按照sessionid把这个session检索出来使用(如果检索不到，可能会新建一个)，如果客户端请求不包含sessionid，则为此客户端创建一个session并且生成一个与此session相关联的sessionid，sessionid的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个sessionid将被在本次响应中返回给客户端已cookie的形式保存。&lt;br /&gt;\r\nsession在大访问量网站上确实影响系统性能，影响性能的原因之一由文件系统设计造成，在同一个目录下超过10000个文件时，文件的定位将非常耗时，另外就是小文件的效率问题，一般我们的session数据都不会态度(1~2K)，如果有大量这样1~2K的文件在磁盘上，IO效率肯定会很差，我们可以采用改写session存储机制，比如存放到数据库中。&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '', '1', '2016-01-29 11:16:43');
INSERT INTO `problems` VALUES ('174', '在子网掩码255.255.255.248的局域网中能够同时使用的IP有多少个', '', '3', '1', '7', '[\"\"]', '6个，255.255.255.248换算成二进制就是11111111.11111111.11111111.11111000&lt;br /&gt;\r\n后面的三位用来表示主机，前面29位用来表示网络。&lt;br /&gt;\r\n三位表示主机，就是可以用来表示2^3=8个，再减去网路地址和广播地址，就是6个了。&lt;br /&gt;', '', '1', '2016-01-29 11:24:10');
INSERT INTO `problems` VALUES ('175', '简述TCP协议的三次握手过程', '', '3', '1', '7', '[\"\"]', 'TCP是主机对主机层的传输控制协议，提供可靠的链接服务，采用三次握手确认建立一个链接：&lt;br /&gt;\r\n第一次握手：建立连接时，客户端发送syn包(syn=j)道服务器，并进入SYN_SEND状态，等待服务器确认；&lt;br /&gt;\r\n第二次握手：服务器收到syn包，必须确认客户的SYN(ack=j+1)，同事自己也发送一个SYN包(syn=k),即SYN+ACK包，此时服务器进入SYN_RECV状态；&lt;br /&gt;\r\n第三次握手:客户端收到服务器的SYN_ACK包，向服务器发送确认包ACK(ack=k+1),&lt;br /&gt;\r\n此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。&lt;br /&gt;\r\n完成三次握手，客户端与服务器开始传送数据。&lt;br /&gt;', '', '1', '2016-01-29 11:33:02');
INSERT INTO `problems` VALUES ('176', '你会用哪个函数设置当前内同的Content-Type', '', '2', '1', '2', '[\"\"]', 'header函数', '', '1', '2016-01-29 14:16:16');
INSERT INTO `problems` VALUES ('177', '通过页面输入用户名abc和密码123登录到123登陆到www.10086.cn,请写出该次请求的HTTP协议报文(包括请求行、消息报头、请求正文)', '', '3', '1', '7', '[\"\"]', 'POST www.10086.cn HTTP/1.1&lt;br /&gt;\r\nAccept:text/html,applocation/xhtml+xml,*/*&lt;br /&gt;\r\nReferer:http://localhost/a.html&lt;br /&gt;\r\nAccept-Language:zh-CN&lt;br /&gt;\r\nUser-Agent:Mozilla/5.0(compatible;MSIE 10.0;Windows NT6.1;WOW64;Trident/6.0;KB974487)&lt;br /&gt;\r\nContent-Type:application/x-www-form-urlencoded&lt;br /&gt;\r\nAccept-Encoding:gzip,deflate&lt;br /&gt;\r\nHost:localhost&lt;br /&gt;\r\nContent-Length:25&lt;br /&gt;\r\nConnection:Keep-Alive&lt;br /&gt;\r\nusername=abc&amp;amp;password=123&lt;br /&gt;', '', '1', '2016-01-29 14:23:55');
INSERT INTO `problems` VALUES ('178', '请解释下列10个shell命令的用途', 'top、ps、mv、find、df、cat、chmod、chgrp、grep、wc', '3', '1', '4', '[\"\"]', 'top:该命令提供了实时对系统处理器状态的监控，它能够实时显示系统中各个进程的资源占用情况。该命令可以按照对CPU、内存使用和执行时间对系统任务进程进行排序显示，同时还可以通过交互式命令进行设定显示&lt;br /&gt;\r\nps:显示系统进程在瞬间的运行动态。&lt;br /&gt;\r\nmv:文件/目录改名或变更存储位置。&lt;br /&gt;\r\nfind:在指定的路径下查找指定文件。&lt;br /&gt;\r\ndf:检查磁盘空间占用情况。&lt;br /&gt;\r\ncat:将文件的内容打印到标准输出。&lt;br /&gt;\r\nchmod:改变文件的权限。&lt;br /&gt;\r\nchgrp:文件文件所属组。&lt;br /&gt;\r\ngrep:过滤文本，根据指定的字符串，对文件的每一行进行搜索，如找到，则输出该行内容。&lt;br /&gt;\r\nwc:统计指定文件中的字节数、字数、行数，并将统计结果显示输出。&lt;br /&gt;', '', '1', '2016-01-29 14:31:39');
INSERT INTO `problems` VALUES ('179', 'vi编辑器中，选中、复制、粘贴、删除的命令各是什么', '', '3', '1', '4', '[\"\"]', '选中：v(以字符为单位)，V(以行为单位)&lt;br /&gt;\r\n复制：y，如yy,nyy,y1G,yG,y0,y$&lt;br /&gt;\r\n粘贴：p(粘贴在光标之后)，P(粘贴在光标之前)&lt;br /&gt;\r\n删除：d，如dd,ndd,d1G,dG,d$,d0&lt;br /&gt;', '', '1', '2016-01-29 14:36:00');
INSERT INTO `problems` VALUES ('180', '获取文件行数', '', '2', '1', '4', '[\"\"]', 'wc -l filename', '', '1', '2016-01-29 14:38:22');
INSERT INTO `problems` VALUES ('181', '输入文件的最后5行到另一个文件中', '', '2', '1', '4', '[\"\"]', 'tail -n 5 file1&amp;gt;&amp;gt;file2', '', '1', '2016-01-29 14:38:41');
INSERT INTO `problems` VALUES ('182', '查找文件中包含hello的行', '', '2', '1', '4', '[\"\"]', 'grep hello filename', '', '1', '2016-01-29 14:39:07');
INSERT INTO `problems` VALUES ('183', '查找当前目录下所有目录名为CVS的子目录的命令', '', '2', '1', '4', '[\"\"]', 'find ./CVS -maxdepth 1 -type d -print', '', '1', '2016-01-29 14:39:32');
INSERT INTO `problems` VALUES ('184', '如何让一个程序在后台运行并把输入定向到指定的文件', '', '3', '1', '4', '[\"\"]', '可使用命令:nohup 程序 &amp;gt;&amp;gt; 文件名 2&amp;gt;&amp;amp;1 &amp;amp; （注意，2&amp;gt;&amp;amp;1要放在输出文件名的后面）', '', '1', '2016-01-29 14:45:02');
INSERT INTO `problems` VALUES ('185', ' 如何把一个文件的内容添加到另一个文件的末尾', '', '2', '1', '4', '[\"\"]', 'cat file1 &amp;gt;&amp;gt; file2', '', '1', '2016-01-29 14:45:31');
INSERT INTO `problems` VALUES ('186', '如何实时的显示一个文件的输出', '', '2', '1', '4', '[\"\"]', '使用more 或者less', '', '1', '2016-01-29 14:46:04');
INSERT INTO `problems` VALUES ('187', '定时执行一个程序的方法有什么', '', '3', '1', '4', '[\"\"]', '可以使用at或者crontab，其中at是处理仅执行一次就结束调度的命令，适用于突发性工作，而crontab将会循环一直进行下去，适用于例行性工作', '', '1', '2016-01-29 14:46:23');
INSERT INTO `problems` VALUES ('188', 'vi编辑器中，如何替换指定的字符串', '', '3', '1', '4', '[\"\"]', '使用s命令，例如：&lt;br /&gt;\r\n：n1,n2s/word1/word2/g,将第n2行与n2行之间的word1替换为word2&lt;br /&gt;\r\n：1,$s/word1/word2/g,从第一行到最后一行中的word1替换为word2&lt;br /&gt;', '', '1', '2016-01-29 14:57:10');
INSERT INTO `problems` VALUES ('189', '当更新后，cvs中文件有冲突时。如何判断哪些你编辑的内容和更新下来的内容', '', '3', '1', '4', '[\"\"]', '使用cvs时，如果出现冲突，双击冲突的文件（标识为红色），显示文件比较窗口。其中蓝色为需要传入的更新，其中灰色为需要传出的修改，其中红色为需要手工解决的冲突。&lt;br /&gt;\r\n可以首先将蓝色需要传入的更新，然后手工解决红色部分，自行选择保留左边还是右边，并选择mark as merge将文件标志为合并，此时将以左边窗口中的内容为一句想服务器提示传出，即灰色和红色部分都会以左边抽口的内容为依据向服务器提交。&lt;br /&gt;\r\n如果冲突文件打开而无任何的颜色提示，可选择update and override，使用服务器上的文件更新本地文件。&lt;br /&gt;', '', '1', '2016-01-29 14:57:40');
INSERT INTO `problems` VALUES ('190', 'linux下，如何查看所有用户___', '', '2', '1', '4', '[\"\"]', 'cat /etc/passwd', '', '1', '2016-01-29 14:58:27');
INSERT INTO `problems` VALUES ('191', 'linux上的crond服务可对服务器设置计划任务，请问如何我需设置每2分钟执行一次/tmp/test.sh的脚本应如何设置计划任务，请写出操作方法。', '', '3', '1', '4', '[\"\"]', '首先用root用户的权限登录。&lt;br /&gt;\r\n切换到/etc/init.d/目录下，使用命令:crond start 启动crond服务&lt;br /&gt;\r\n切换到/etc/目录下，使用命令：crontab -e&lt;br /&gt;\r\n编辑如下：*/2**** /tmp/test.sh&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '', '1', '2016-01-29 15:01:59');
INSERT INTO `problems` VALUES ('192', '查看磁盘空间使用率的Linux命令是什么？查看有哪些系统进程正在运行命令是什么？检测Linux性能(CPU,磁盘io,内存，网络等)都用到哪些命令', '', '3', '1', '4', '[\"\"]', '查看磁盘空间使用率的命令：df&lt;br /&gt;\r\n查看系统进程命令：top&lt;br /&gt;\r\n检测Linux性能的命令：ps,free,vmstat,netstat&lt;br /&gt;', '', '1', '2016-01-29 15:04:13');
INSERT INTO `problems` VALUES ('193', 'Linux下终止一个进程用什么命令？打包压缩和解包用什么命令？软连接和硬链接有什么区别？建立软连接的命令是？', '', '3', '1', '4', '[\"\"]', '终止进程的命令：kill&lt;br /&gt;\r\n打包压缩和解包命令：tar&lt;br /&gt;\r\n建立软连接的命令：ln -s 源文件 目标链接名&lt;br /&gt;\r\n硬链接是通过文件系统的inode来产生新文件名，而不是新文件，他只是在某个目录新建一条文件名链接到某inode号码的管理记录而已，而软连接是创建一个独立的文件，该文件让数据的读取指向它链接的那个文件的文件名，类似于windows中的快捷方式。&lt;br /&gt;', '', '1', '2016-01-29 15:08:54');
INSERT INTO `problems` VALUES ('194', '说说Linux下的find命令和grep命令的区别', '', '3', '1', '4', '[\"\"]', 'find:在磁盘/分区中找到文件，可以配type可以配size time等，通过文件名或文件大小或访问时间找到指定文件。&lt;br /&gt;\r\ngrep：查找文件里符合条件的字符串，并把匹配的行打印出来，可以使用正则表达式&lt;br /&gt;', '', '1', '2016-01-29 15:11:46');
INSERT INTO `problems` VALUES ('195', '有mail.log的一个文档，内容为若干邮件地址，其中用\'\\n\'将邮件地址分隔。要求从中挑选出sina.com的邮件地址（包括从文件读取，过滤到列印出来）', 'mail.log内容如下：&lt;br /&gt;\r\njames@sina.com.cn&lt;br /&gt;\r\njack@163.com&lt;br /&gt;\r\nzhangsan@sohu.com&lt;br /&gt;\r\nlisi@hotmail.com&lt;br /&gt;\r\nwangwu@gmail.com&lt;br /&gt;', '3', '1', '4', '[\"\"]', '参考答案：&lt;br /&gt;\r\ncate mail.log | grep sina.com&lt;br /&gt;\r\n或者：&lt;br /&gt;\r\n#!/bin/bash&lt;br /&gt;\r\nwhile read row;&lt;br /&gt;\r\ndo&amp;nbsp;&lt;br /&gt;\r\ncase $row in&amp;nbsp;&lt;br /&gt;\r\n*sina.com*)echo $row;;&lt;br /&gt;\r\nesac&lt;br /&gt;\r\ndone&amp;lt;mail.log&lt;br /&gt;', '', '1', '2016-01-29 15:17:03');
INSERT INTO `problems` VALUES ('196', '写出下列服务的用途和默认端口', 'ftp ssh http telnet https', '3', '1', '7', '[\"\"]', 'ftp: File Tramsfer Protocol,文件传输协议，是应用层协议，它基于传输层，为用户服务，他们负责进行文件的传输，其默认端口是21.&lt;br /&gt;\r\nssh: Secure Shell,安全外壳协议，建立在应用层和传输层基础上的安全协议。SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议，其默认端口是22.&lt;br /&gt;\r\nhttp: Hypertext transport protocol，超文本传输协议，是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议，其默认端口是80。&lt;br /&gt;\r\ntelent: Telenet协议是TCP/IP协议族中的一员，是Internet远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力，其默认端口是23。&lt;br /&gt;\r\nhttps: Hypertext transport protocol over Secure Socket Layer,是以安全为目标的HTTP通道，来保证数据传输的安全；另一种就是确认网站的真实性，其默认端口是443。&lt;br /&gt;', '', '1', '2016-01-29 15:29:39');
INSERT INTO `problems` VALUES ('197', '你用什么方法检查PHP脚本的执行效率（通常是脚本执行时间）和数据库SQL的效率（通常是数据库Query时间），并定位和分析脚本执行和数据库查询的瓶颈所在', '', '3', '1', '2', '[\"\"]', '脚本执行时间，启用xdebug，使用wincachegrind分析。&lt;br /&gt;\r\n数据库查询，mysql使用EXPLAIN分析查询，启用slow query log记录慢查询。&lt;br /&gt;', '', '1', '2016-01-29 15:33:28');
INSERT INTO `problems` VALUES ('198', '对于大流量的网站，你采用什么样的方法来解决访问量问题', '', '3', '1', '2', '[\"\"]', '1） 确认服务器硬件能否支持当前的流量&lt;br /&gt;\r\n对于普通的pc server来说，它能够独立支持每天10万个独立ip访问，如果访问量过大，最好更好性能更高的专用服务器。&lt;br /&gt;\r\n2） 优化数据库的访问&lt;br /&gt;\r\n服务器的负载过大，一个重要的原因就是CPU和内存负载过高，而读写数据在这块占据较多的资源，可以从页面静态化、memcache缓存和mysql优化几个方面着手。&lt;br /&gt;\r\n3） 禁止外部盗链&lt;br /&gt;\r\n占用较大的流量，防盗链，使用reference来判断一下。如果是图片的话，使用添加水印即可很好的防止。&lt;br /&gt;\r\n4） 控制大文件的下载&lt;br /&gt;\r\n最好把文件下载的容量控制为相对较小的一个值，如果有大文件下载，最好使用专用的服务器。&lt;br /&gt;\r\n5） 使用多台主机实现分流，集群&lt;br /&gt;\r\n6） 使用流量分析软件进行分析统计谷歌和百度&lt;br /&gt;', '', '1', '2016-01-29 16:28:17');
INSERT INTO `problems` VALUES ('199', 'How do you debug a PHP application', '', '3', '1', '2', '[\"\"]', '使用Xdebug 或者 Advanced PHP Debugger', '', '1', '2016-01-29 16:33:50');
INSERT INTO `problems` VALUES ('200', 'PEAR中的数据库链接字符串格式是___', '', '3', '1', '2', '[\"\"]', 'PEAR中的数据库链接字符串格式是___&lt;br /&gt;\r\n$dsn = \'mysql://username:password@localhost/test\'&lt;br /&gt;\r\n$options = array(&lt;br /&gt;\r\n\'debug\'=&amp;gt;2,&lt;br /&gt;\r\n\'portbility\'=&amp;gt;DB_PORTABILITY_ALL,&lt;br /&gt;\r\n)&lt;br /&gt;\r\nDB::connect($dsn,$options),其中options参数是可选的。&lt;br /&gt;\r\nPEAR是PHP扩展与应用库(the PHP Extension and Application Repository)的缩写。它是一个PHP拓展及应用的一个代码仓库，PEAR处理数据库的模块是PEAR DB。&lt;br /&gt;', '', '1', '2016-01-29 16:38:43');
INSERT INTO `problems` VALUES ('201', '如何实现PHP、JSP交互', '', '3', '1', '2', '[\"\"]', '题目有点含糊不清，SOAP，XML_RPC，Socket function,CURL都可以实现这些，如果是考虑PHP和Java的整合，PHP内置了这种机制(如果考PHP和.NET的整合，可以这么回答)。&lt;br /&gt;\r\nPHP提供了支持JAVA的类库文件，或者通过HTTP协议来交换数据。&lt;br /&gt;', '', '1', '2016-01-29 16:41:43');
INSERT INTO `problems` VALUES ('202', 'Apache+mysql+php实现最大负载的方法', '', '3', '1', '2', '[\"\"]', '1) 问的太笼统，生成静态html页面，squid反响代理，apache，mysql的负载均衡。&lt;br /&gt;\r\n2）可以采取数据缓存的方法，我们通常在统计数据的时候，需要在原始数据的基础上经过计算等一系列操作，才会得到最终的结果，如果没做一个查询都需要这样的一系列操作，当数据量大时，势必会带来很多问题。可以建立一个结果表，前端查询从结果表取数据，这也是比较常用的一个做法。&lt;br /&gt;\r\n3）采用分布式，多个apache，多个mysql，其实就是dns负载均衡，dns根据当前用户解析几个ip的ping值，将用户转移到某一台最快的服务器，或者平均分配。&lt;br /&gt;\r\n4）money不是问题的话，可以考虑F5硬件负载均衡&lt;br /&gt;\r\n5）可以使用Microsoft Windows Server系统的负载均衡设置&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '', '1', '2016-01-29 16:49:59');
INSERT INTO `problems` VALUES ('203', 'Ajax，数据库触发器，GUI，中断机制的共同思想。谈谈该思想', '', '3', '1', '2', '[\"\"]', '主要就是异步，主进程不会被一个异步任务阻塞，当进程发出命令之后，继续执行主任务，不用等待子任务执行完，这样效率更高。&lt;br /&gt;\r\n数据库触发器和中断机制是数据库自动完成的，而ajax触发器是用户激发的。ajax把GUI和数据库异步优化。&lt;br /&gt;', '', '1', '2016-01-29 16:53:04');
INSERT INTO `problems` VALUES ('204', '把一篇英文文档所有单词的首字母转为大写，文档存在doc.txt中。可以在多种编程语言中选择(c\\c++,JAVA,PHP....)写出你的思路，尽量优化你程序。', '', '3', '1', '2', '[\"\"]', '$str = file_get_content(\'doc.txt);&lt;br /&gt;\r\n$str = ucwords($str);&lt;br /&gt;\r\nfile_put_contents(\'doc.txt\',$str);&lt;br /&gt;', '', '1', '2016-01-29 17:07:38');
INSERT INTO `problems` VALUES ('205', '防止SQL注射漏洞一般用_____函数', '', '2', '1', '2', '[\"\"]', 'addslashes', '', '1', '2016-01-29 17:08:41');
INSERT INTO `problems` VALUES ('206', '请问cgi和fastcgi有什么不同，你在什么情况下会选择哪个', '', '3', '1', '2', '[\"\"]', '原理一样，都是利用标准输入输出流处理HTTP之类的文本协议，都是通过多进程模式处理多请求。不同之处在于FastCGI的一个进程处理玩一个请求之后重置状态并挂起，待下一个请求来时继续处理；而CGI的一个进程则处理完一个请求后退出，下一个请求来时在创建新的进程。', '', '1', '2016-01-29 17:12:21');
INSERT INTO `problems` VALUES ('207', 'zend optimizer是什么', '', '3', '1', '2', '[\"\"]', 'Zend Optimizer可以加速PHP脚本的执行，提高PHP应用程序的执行速度。实现的原理是对那些程序在被最终执行之前由运行编译器(Run-Time Compiler)产生的代码进行优化。一般情况下，执行使用Zend Optimizer的PHP程序比不使用的要快40%到100%。这意味着网站的访问者可以更快的浏览网页，从而完成更多的事务，创造更好的客户满意度。&lt;br /&gt;\r\nZend Optimizer还可以给用Zend加密的文件解密。&lt;br /&gt;', '', '1', '2016-01-29 17:25:24');
INSERT INTO `problems` VALUES ('208', '列举web开发中的安全性问题', '', '3', '1', '2', '[\"\"]', 'sql注入攻击。&lt;br /&gt;\r\n数据库操作安全，UPDATE、DELETE、INSERT的操作没有限制用户操作权限，这将是一件很危险的事情。&lt;br /&gt;\r\n没有验证用户http请求的方式POST或者GRT，GET请求被合法通过。&lt;br /&gt;\r\n没有验证表单来源的唯一性，不能识别是合法的表单提交还是黑客伪造的表单提交。&lt;br /&gt;\r\nXSS攻击。&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '', '1', '2016-01-29 17:28:56');
INSERT INTO `problems` VALUES ('209', ' 如何通过PHP程序防止外部页面提交表单？编写一段代码', '', '3', '1', '2', '[\"\"]', '&amp;lt;?php&amp;nbsp;&lt;br /&gt;\r\nsession_start();&lt;br /&gt;\r\nif(isset($_POST[\'name\'])&amp;amp;&amp;amp;!empty($_POST[\'\'name])){&lt;br /&gt;\r\nif($_POST[\'check\']==$_SESSION[\'\'check]){&lt;br /&gt;\r\necho \'正常访问\';&lt;br /&gt;\r\n}else{&lt;br /&gt;\r\necho \'外部访问\';&lt;br /&gt;\r\n}&lt;br /&gt;\r\n}&lt;br /&gt;\r\n$token &amp;nbsp;= md5(uniqid(rand(),true));&lt;br /&gt;\r\n$_SESSION[\'check\'] = $token;&lt;br /&gt;\r\n?&amp;gt;&lt;br /&gt;\r\n&lt;br /&gt;\r\n&amp;lt;form method=&quot;post&quot; action=&quot;&quot;&amp;gt;&lt;br /&gt;\r\n&amp;lt;input type=&quot;text&quot; name=&quot;name&quot;/&amp;gt;&lt;br /&gt;\r\n&amp;lt;input type=&quot;hidden&quot; name=&quot;check&quot; value=&quot;&amp;lt;?php echo $token;?&amp;gt;&quot;/&amp;gt;&lt;br /&gt;\r\n&amp;lt;input type=&quot;submit&quot;/&amp;gt;&lt;br /&gt;\r\n&amp;lt;/form&amp;gt;&lt;br /&gt;', '', '1', '2016-01-29 17:35:30');
INSERT INTO `problems` VALUES ('210', '如果某段与数据库交互的程序运行较慢你将如何处理', '', '3', '1', '3', '[\"\"]', '一是首先提高数据库的查询速度，比如增加索引，优化表的结构。&lt;br /&gt;\r\n二是优化程序代码，如果查询比较多，可以尽量用条件查询，减少查询语句，比如能用一条查询语句就不用两条。&lt;br /&gt;\r\n三就是提高服务器的速度，优化服务器，把不必要的进程关掉。&lt;br /&gt;', '', '1', '2016-01-29 17:40:53');
INSERT INTO `problems` VALUES ('211', '以下代码会产生什么问题，如何解决', '&amp;lt;?php&lt;br /&gt;\r\n$dir = $_POST[\'dir\'];&lt;br /&gt;\r\ninclude(&quot;/usr/local/apache/htdoc/inc/$dir&quot;);&lt;br /&gt;\r\n?&amp;gt;&lt;br /&gt;', '3', '1', '2', '[\"\"]', '不安全，必须对用户的输入进行验证和过滤。', '', '1', '2016-01-29 17:43:18');
INSERT INTO `problems` VALUES ('212', '用户在网站表单提交数据的时候，为了防止脚本攻击（比如用户输入&lt;script&gt;alert(111);&lt;/script&gt;）,php端接收数据的时候，应该如何处理？', '', '3', '1', '2', '[\"\"]', '可以对用户输入的数据进行转义，如htmlspecialchars($_POST[\'title\']);', '', '1', '2016-01-29 18:03:42');
INSERT INTO `problems` VALUES ('213', '使用过memcache缓存吗，如果使用过，能够简单的描述一下它的工作原理吗', '', '3', '1', '2', '[\"\"]', 'memcache是把所有的数据保存在内存当中，采用hash表的方式，每条数据由key和value组成，每个key是独一无二的，当要访问某个值的时候先按照找到值，然后返回结果，memcache采用LRU算法来逐渐把过期数据清除掉。', '', '1', '2016-01-29 18:04:01');
INSERT INTO `problems` VALUES ('214', '假设给你5台服务器，请大致描述一下，如何使用你熟悉的开源软件，搭建一个日PV300万左右的中型网站', '', '3', '1', '2', '[\"\"]', '参考结构：&lt;br /&gt;\r\n3台web服务器，两台Mysql数据库服务器，采用Master/Slave同步的方式的方式减轻数据库负载，同时三台web服务器内容一致，可以采用DNS轮询的方式来进行负载平衡&lt;br /&gt;', '', '1', '2016-01-30 09:51:41');
INSERT INTO `problems` VALUES ('215', '需要设置一个有效期31天的memcache值，请补充下面的代码', '&amp;lt;?php&lt;br /&gt;\r\n$memcache_obj=new memcache;&lt;br /&gt;\r\n$memcache_obj-&amp;gt;connect(\'memcache_host,11211\');&lt;br /&gt;\r\n$memcache_obj-&amp;gt;set(\'varKey\',\'varValue\',0,_____);&lt;br /&gt;\r\n?&amp;gt;&lt;br /&gt;', '2', '1', '2', '[\"\"]', 'time()+3600*24*31', '', '1', '2016-01-30 09:56:12');
INSERT INTO `problems` VALUES ('216', '现在请你设计一个留言板系统，请简要的写出你设计的其中分页算法的思路', '', '3', '1', '3', '[\"\"]', '主要是数据库的设计系统的架构思想&lt;br /&gt;\r\n分页算法的原理是limit offset,pagesize&lt;br /&gt;\r\n其中，pagesize是设定好的，而offset则要通过计算得到，不同的页数对应的offset也不同，设当前页为currentpage，则offset = (currentpage - 1)*pagesize&lt;br /&gt;', '', '1', '2016-01-30 10:00:19');
INSERT INTO `problems` VALUES ('217', '假设有&quot;123&lt;em&gt;abc&lt;/em&gt;456&lt;em&gt;def&lt;/em&gt;789&quot;这么一个字符串，写一个函数，可以传入一个字符串，和一个要截取的长度。返回截取后的结果', '要求:&lt;br /&gt;\r\n(1).&amp;lt;em&amp;gt;和&amp;lt;/em&amp;gt;标记不得计算在长度之内&lt;br /&gt;\r\n(2).截取后的字符串，要保留原有&amp;lt;em&amp;gt;标签，不过如果最后有一个标签没有闭合，则去掉其开始标签。示例：题中的字符串，要截取长度5，则返回的字符串应该为123ab，要截取长度8，应返回123&amp;lt;em&amp;gt;abc&amp;lt;/em&amp;gt;45&lt;br /&gt;\r\n参考代码：&lt;br /&gt;', '3', '1', '2', '[\"\"]', 'function cut($str,$len=null){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $last = 0;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $str_len = strlen($str);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $result = \'\';&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $result_len = 0;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; do{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $pattern = \'/&amp;lt;em&amp;gt;(.*?)&amp;lt;\\/em&amp;gt;/i\';&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $num = preg_match($pattern, $str, $m, PREG_OFFSET_CAPTURE,$last);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if($num){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $result .= substr($str, $last, $add_len=($m[0][1]-$last&amp;lt;$len-$result_len)?$m[0][1]-$last:$len-$result_len);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $last = $m[0][1]+strlen($m[0][0]);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if($result_len&amp;lt;$len){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if($len-$result_len&amp;gt;=strlen($m[1][0])){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $result.=$m[0][0];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $result_len+=strlen($m[1][0]);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }else{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $result.=substr($m[1][0],0,$len-$result_len);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; ', '', '1', '2016-01-30 10:30:05');
INSERT INTO `problems` VALUES ('218', '在UNIX或windows系统内以()为单位分配资源以()单位分配时间调度', '', '2', '1', '5', '[\"\"]', '进程，时间片', '', '1', '2016-01-30 10:31:23');
INSERT INTO `problems` VALUES ('219', '正则表达式中*?+的作用分别是什么', '', '3', '1', '2', '[\"\"]', '*?+都有用来匹配数量的，*表示0或多个,?表示0个或1个，+表示1个或多个。', '', '1', '2016-01-30 10:32:45');
INSERT INTO `problems` VALUES ('220', '写出你所知道的XML解析器', '', '3', '1', '2', '[\"\"]', 'DOM,SAX,SimpleXML，其中前两种是通用的解析器，和具体语言无关，而SimpleXML则是PHP提供的解析器。', '', '1', '2016-01-30 10:35:07');
INSERT INTO `problems` VALUES ('221', '在程序中表示时间可以使用哪几种变量类型', '', '3', '1', '2', '[\"\"]', '在PHP中可以使用int或字符串来表示(php中没有日期时间类型)，在Mysql中，可以使用int,date,datetime,timestamp。', '', '1', '2016-01-30 10:37:15');
INSERT INTO `problems` VALUES ('222', '使用utf-8编码存储中文姓名，一般会分配多少次个字节的存储空间', '', '3', '1', '3', '[\"\"]', 'UTF-8编码是可变长编码，对于中文而言，一个字符使用3个字节来存储。', '', '1', '2016-01-30 10:38:54');
INSERT INTO `problems` VALUES ('223', '如果要求每隔5分钟执行一次脚本five.php，如何实现', '用到的函数ignore_user_abort(),set_time_limit(0),sleep($interval),此代码只要运行一次后关闭浏览器即可。', '3', '1', '2', '[\"\"]', '&amp;lt;?php&lt;br /&gt;\r\nignore_user_abort();&lt;br /&gt;\r\nset_time_limit(0);&lt;br /&gt;\r\n$interval=60*5;&lt;br /&gt;\r\ndo{&lt;br /&gt;\r\nsleep($interval);&lt;br /&gt;\r\n}while(true);&lt;br /&gt;', '', '1', '2016-01-30 10:43:00');
INSERT INTO `problems` VALUES ('224', '解释下面语句的意思:document.form[&quot;formName&quot;].submit', '&amp;lt;body&amp;gt;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;lt;form action=&quot;a.php&quot; method=&quot;post&quot; name=&quot;login&quot; id=&quot;f1&quot;&amp;gt;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; 用户名：&amp;lt;input type=&quot;text&quot; name=&quot;username&quot; /&amp;gt;&amp;lt;br/&amp;gt;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;lt;button type=&quot;button&quot; id=&quot;btn&quot;&amp;gt;提交&amp;lt;/button&amp;gt;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;lt;/form&amp;gt;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; document.getElementById(&quot;btn&quot;).onclick = function(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(document.forms[\'login\'].username.value != \'\'){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.forms[\'login\'].submit();&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;lt;/script&amp;gt;&lt;br /&gt;\r\n&amp;lt;/body&amp;gt;&lt;br /&gt;', '3', '1', '1', '[\"\"]', '获取name为formName的表单并将该表单数据提交到服务器。但这行代码是不能运行的，有两处错误，一是通过表单名称来获取表单得到时候，应该写成document.forms[\'formName\'],提交表单事件使用submit方法，需要加上括号，下面给出简单的示例代码：', '', '1', '2016-01-30 10:53:29');
INSERT INTO `problems` VALUES ('225', '有下面语句：&lt;input id=&quot;txt&quot; type=&quot;text&quot; value=&quot;baidu&quot; /&gt;编写代码，当鼠标划过文本框，自动选中文本框中的内容', '', '3', '1', '1', '[\"\"]', '&amp;lt;body&amp;gt;&lt;br /&gt;\r\n&amp;lt;input id=\'txt\' type=\'text\' value=\'baidu\' /&amp;gt;&lt;br /&gt;\r\n&amp;lt;script type=\'text/javascript\'&amp;gt;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; var textBox = document.getElementById(\'txt\');&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; textBox.onmouseover = function(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.select();&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;lt;/script&amp;gt;&lt;br /&gt;\r\n&amp;lt;/body&amp;gt;&lt;br /&gt;', '', '1', '2016-01-30 10:58:47');
INSERT INTO `problems` VALUES ('226', '设计一个网页，使得打开它时弹出一个全屏的窗口，该窗口中国有一个文本框和一个按钮，用户在文本框中输入信息后点击按钮就可以把窗口关闭，而输入的信息却在主网页中显示', '', '3', '1', '1', '[\"\"]', '&lt;p&gt;\r\n	主窗口：\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	&amp;lt;a href=&quot;&quot; id=&quot;a1&quot; target=&quot;new&quot;&amp;gt;新窗口&amp;lt;/a&amp;gt;&lt;br /&gt;\r\n&amp;lt;div id=&quot;msg&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;\r\n&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;br /&gt;\r\nvar a1 = document.getElementById(\'a1\');&lt;br /&gt;\r\na1.onclick = function (){&lt;br /&gt;\r\nwindow.open(\'new.html\',\'new\',\'location=no,toolbar=no\');&lt;br /&gt;\r\nreturn false;&lt;br /&gt;\r\n}&lt;br /&gt;\r\n&amp;lt;/script&amp;gt;&lt;br /&gt;\r\n弹出窗口：&lt;br /&gt;\r\n&amp;lt;input type=&quot;text&quot; name=&quot;message&quot; id=&quot;m1&quot;/&amp;gt;&amp;lt;br/&amp;gt;&lt;br /&gt;\r\n&amp;lt;input type=&quot;buttom&quot; value=&quot;关闭&quot; id=&quot;btn&quot;/&amp;gt;&lt;br /&gt;\r\n&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;br /&gt;\r\nvar btn = document.getElementById(\'btn\');&lt;br /&gt;\r\nvar message = document.getElementById(\'m1\');&lt;br /&gt;\r\nbtn.onclick = function(){&lt;br /&gt;\r\nvar div = window.opener.document.getElementById(\'msg\');&lt;br /&gt;\r\ndiv.innerHTML = message.value;&lt;br /&gt;\r\nwindow.close();&lt;br /&gt;\r\n}&lt;br /&gt;\r\n&amp;lt;/script&amp;gt;&lt;br /&gt;\r\n&lt;/p&gt;', '', '1', '2016-01-30 11:07:32');
INSERT INTO `problems` VALUES ('227', '用JavaScript写一个函数，其功能是可以删除数组中重复的元素', '', '3', '1', '1', '[\"\"]', '&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;br /&gt;\r\nfunction array_unique(arr){&lt;br /&gt;\r\nvar result = arr;&lt;br /&gt;\r\nfor (var i = 0; i &amp;lt; arr.length; i++) {&lt;br /&gt;\r\nfor (var j = 0; j &amp;lt; arr.length; j++) {&lt;br /&gt;\r\ntemp = arr[i];&lt;br /&gt;\r\n//如果当前元素与后面某一个元素相等，则移除该元素&lt;br /&gt;\r\nif((i+j+1)&amp;lt;arr.length&amp;amp;&amp;amp;temp===arr[i+j+1]){&lt;br /&gt;\r\nresult.splice(i+j+1,1);&lt;br /&gt;\r\n}&lt;br /&gt;\r\n};&lt;br /&gt;\r\n};&lt;br /&gt;\r\nreturn result;&lt;br /&gt;\r\n}&lt;br /&gt;\r\nvar a = [4,7,8,5,8,6,43,7,0,false,\'\',{}];&lt;br /&gt;\r\nvar b = array_unique(a);&lt;br /&gt;\r\nalert(b);//4,7,8,5,6,43,0,false,,[object object]&lt;br /&gt;\r\n&amp;lt;/script&amp;gt;&lt;br /&gt;', '', '1', '2016-01-30 11:18:40');
INSERT INTO `problems` VALUES ('228', '假设a.html和b.html在同一个文件夹下面，用JavaScript实现当打开a.html五秒钟后，自动跳转b.html', '', '3', '1', '1', '[\"\"]', '&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;br /&gt;\r\nfunction go2b(){&lt;br /&gt;\r\nwindow.location.href = &quot;http://www.baidu.com&quot;;&lt;br /&gt;\r\nwindow.close();&lt;br /&gt;\r\n}&lt;br /&gt;\r\nsetTimeout(&quot;go2b()&quot;,5000);//5秒钟后自动执行go2b()&lt;br /&gt;\r\n&amp;lt;/script&amp;gt;&lt;br /&gt;', '', '1', '2016-01-30 11:21:29');
INSERT INTO `problems` VALUES ('229', '请写出一条至少3个节点的DOM树', '', '2', '1', '1', '[\"\"]', '&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;br /&gt;\r\nvar div = document.createElement(&quot;div&quot;);&lt;br /&gt;\r\nvar a = document.createElement(&quot;a&quot;);&lt;br /&gt;\r\na.href = &quot;http://www.baidu.com&quot;;&lt;br /&gt;\r\nvar span = document.createElement(&quot;span&quot;);&lt;br /&gt;\r\nspan.innerHTML = &quot;百度&quot;;&lt;br /&gt;\r\na.appendChild(span);&lt;br /&gt;\r\ndiv.appendChild(a);&lt;br /&gt;\r\ndocument.body.appendChild(div);&lt;br /&gt;\r\n&lt;p&gt;\r\n	&amp;lt;/script&amp;gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	结果HTML：\r\n&lt;/p&gt;\r\n&amp;lt;div&amp;gt;&amp;lt;a href=&quot;http://www.baidu.com&quot;&amp;gt;&amp;lt;span&amp;gt;百度&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;', '', '1', '2016-01-30 11:26:44');
INSERT INTO `problems` VALUES ('230', 'strlen()与mb_strlen()的作用分别是什么', '', '3', '1', '2', '[\"\"]', 'strlen和mb_strlen()都是用于获取字符串长度的，其中strlen只针对单字节编码字符，也就是说它计算的是字符串的总字节数，如果是多字节编码，如gbk和utf8，使用strlen得到的不是字符的个数，而是该字符串的总字节数，可以使用mb_strlen获取其字符个数，使用mb_strlen要注意两点，一是要开启mbstring扩展，二是要指定字符集。', '', '1', '2016-01-30 13:58:50');
INSERT INTO `problems` VALUES ('231', '写出下列程序的输出结果', '&amp;lt;?php&lt;br /&gt;\r\n$x = 87;&lt;br /&gt;\r\n$y = ($x % 7) * 16;&lt;br /&gt;\r\n$z = $x &amp;gt; $y ? 1:0;&lt;br /&gt;\r\necho $z;&lt;br /&gt;', '2', '1', '2', '[\"\"]', '1', '', '1', '2016-01-30 14:01:03');
INSERT INTO `problems` VALUES ('232', '用最少的代码写一个求3值最大值的函数', '', '3', '1', '2', '[\"\"]', '&amp;lt;?php&lt;br /&gt;\r\n//定义函数&lt;br /&gt;\r\nfunction maximum($a,$b,$c){&lt;br /&gt;\r\nreturn $a &amp;gt; $b ? ($a &amp;gt; $c ? $a : $c) : ($b &amp;gt; $c ? $b : $c);&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//调用实例&lt;br /&gt;\r\necho maximum(24,15,8);&lt;br /&gt;', '', '1', '2016-01-30 14:05:56');
INSERT INTO `problems` VALUES ('233', 'echo(),print(),print_r()的区别', '', '3', '1', '2', '[\"\"]', 'echo是一个语言结构，输出一个或多个字符串；&lt;br /&gt;\r\nprint()实际上不是一个函数（它是一个语言结构），因此你可以不必使用圆括号来括起来它的参数列表，它输出一个字符串；&lt;br /&gt;\r\nprint_r()是一个函数，打印变量的信息，基本类型，数组，对象。&lt;br /&gt;', '', '1', '2016-01-30 14:09:45');
INSERT INTO `problems` VALUES ('234', '用PHP打印出前一天的时间格式是2006-5-10 22:21:21', '', '3', '1', '2', '[\"\"]', 'echo date(&quot;Y-m-d H:i:s&quot;,time()-3600*24);&lt;br /&gt;\r\n//使用strtotime,可以将任何字符串的时间表示转换时间戳，仅针对英文&lt;br /&gt;\r\necho \'&amp;lt;br/&amp;gt;\';&lt;br /&gt;\r\necho date(\'Y-m-d H:i:s\',strtotime(&quot;-1 day&quot;));&amp;nbsp;&lt;br /&gt;\r\n//在实际开发的时候，strtotime非常游泳，因为对于表单来说，提交的数据都是字符串&lt;br /&gt;\r\n////比如，2013-4-27，需要将其转成时间戳然后存在数据库&lt;br /&gt;', '', '1', '2016-01-30 14:18:39');
INSERT INTO `problems` VALUES ('235', '不使用第三个变量交换两个变量的值', '', '3', '1', '2', '[\"\"]', '&lt;p&gt;\r\n	方案一：\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	$a = \'PHP\';&lt;br /&gt;\r\n$b = \'MYSQL\';&lt;br /&gt;\r\necho $a,$b;&lt;br /&gt;\r\nlist($a,$b) = array($b,$a);&lt;br /&gt;\r\necho \'&amp;lt;br/&amp;gt;\';&lt;br /&gt;\r\necho $a,$b;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	方案二：&lt;br /&gt;\r\n对字符进行编码，比如base64_encode,要保证编码是可逆的\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	$a = \'PHP编程\';&lt;br /&gt;\r\n$b = \'MYSQL数据库\';&lt;br /&gt;\r\necho $a,$b;&lt;br /&gt;\r\n$a = base64_encode($a);&lt;br /&gt;\r\n$b = base64_encode($b);&lt;br /&gt;\r\n$a = $a.\'&amp;amp;\'.$b;//得到一个有&amp;amp;符号连接的字符串&lt;br /&gt;\r\n//使用字符串分割函数得到数组&lt;br /&gt;\r\n$b = explode(\'&amp;amp;\', $a);&lt;br /&gt;\r\n$a = base64_decode($b[1]);//得到第一个字符并解码&lt;br /&gt;\r\n$b = base64_decode($b[0]);//得到第二个字符并解码&lt;br /&gt;\r\necho \'&amp;lt;br/&amp;gt;\';&lt;br /&gt;\r\necho $a,$b;&lt;br /&gt;\r\n&lt;br /&gt;\r\n	&lt;div&gt;\r\n		&lt;br /&gt;\r\n	&lt;/div&gt;\r\n&lt;/p&gt;', '', '1', '2016-01-30 14:36:25');
INSERT INTO `problems` VALUES ('236', 'what would the following code print to the brower? Why?', '', '3', '1', '2', '[\"\"]', '&amp;lt;?php&lt;br /&gt;\r\n$num = 10;&lt;br /&gt;\r\nfunction multiply($num){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $num = $num * 10;&lt;br /&gt;\r\n}&lt;br /&gt;\r\nmultiply($num);&lt;br /&gt;\r\necho $num;&lt;br /&gt;', '', '1', '2016-01-30 14:43:27');
INSERT INTO `problems` VALUES ('237', '将1234567890转换成1,,234,567,890每3位用逗号隔开的形式。', '', '3', '1', '2', '[\"\"]', '&amp;lt;?php&lt;br /&gt;\r\n$str = \'1234567890\';&lt;br /&gt;\r\nfunction str($str){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //反转字符串得到0987654321&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $str = strrev($str);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //使用，分割字符串，得到098,765,432,1,&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $str = chunk_split($str,3,\',\');&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //再次反转字符串，得到1,234,567,890&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $str = strrev($str);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //去掉左边的，得到1,234,567,890&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $str = ltrim($str,\',\');&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $str;&lt;br /&gt;\r\n}&lt;br /&gt;', '', '1', '2016-01-30 14:48:47');
INSERT INTO `problems` VALUES ('238', '写出一下程序的输出结果', '&amp;lt;?php&lt;br /&gt;\r\n$str = \'cd\';&lt;br /&gt;\r\n$$str = \'hotdog\';&lt;br /&gt;\r\n$$str.= \'ok\';&lt;br /&gt;\r\necho $cd;&lt;br /&gt;', '3', '1', '2', '[\"\"]', 'hotdogok', '', '1', '2016-01-30 14:51:22');
INSERT INTO `problems` VALUES ('239', '写个函数用来对二维数组排序', '', '3', '1', '2', '[\"\"]', '&amp;lt;?php&lt;br /&gt;\r\n/**&lt;br /&gt;\r\n&amp;nbsp;* 根据某列对二维数组进行排序&lt;br /&gt;\r\n&amp;nbsp;* @param &amp;nbsp;$arr array 要排序的数组&lt;br /&gt;\r\n&amp;nbsp;* @param &amp;nbsp;$row string 排序依据列&lt;br /&gt;\r\n&amp;nbsp;* @param &amp;nbsp;$type string asc表示正序，默认值，desc表示逆序&lt;br /&gt;\r\n&amp;nbsp;* @return array 返回排序好的数组&lt;br /&gt;\r\n&amp;nbsp;*/&lt;br /&gt;\r\nfunction array_sort($arr,$row,$tyoe = \'asc\'){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr_temp = array();&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //将排序依据列作为数组的键名&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; foreach ($arr as $v) {&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $arr_temp[$v[$row]] = $v; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //然后按照键名对数组排序，并保持索引关系&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if($type == \'asc\'){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ksort($arr_temp);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }elseif($type == \'desc\'){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; krsort($arr_temp);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //返回排序结果&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $arr_temp;&lt;br /&gt;\r\n}&lt;br /&gt;\r\n$person = array(&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'id\'=&amp;gt;2,\'name\'=&amp;gt;\'zhangsan\',\'age\'=&amp;gt;23),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'id\'=&amp;gt;5,\'name\'=&amp;gt;\'lisi\',\'age\'=&amp;gt;28),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'id\'=&amp;gt;3,\'name\'=&amp;gt;\'apple\',\'age\'=&amp;gt;17),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; );&lt;br /&gt;\r\n//调用实例&lt;br /&gt;\r\n$person = array_sort($person,\'name\');&lt;br /&gt;\r\nprint_r($person);&lt;br /&gt;', '', '1', '2016-01-30 15:04:41');
INSERT INTO `problems` VALUES ('240', '写5个不同的自己的函数，来获取一个全路径的文件的扩展名，允许封装php库中已有的函数', '', '3', '1', '2', '[\"\"]', '&amp;lt;?php&lt;br /&gt;\r\n$path = str_replace(\'\\\\\', \'/\', __FILE__);&lt;br /&gt;\r\n//方法一&lt;br /&gt;\r\nfunction ext_name1($path){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return strrchr($path, \'.\');&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//方法二&lt;br /&gt;\r\nfunction ext_name2($path){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return substr($path,strrpos($path,\'.\'));&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//方法三&lt;br /&gt;\r\nfunction ext_name3($path){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $path_parts = pathinfo($path);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $path_parts[\'extension\'];&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//方法四&lt;br /&gt;\r\nfunction ext_name4($path){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr = explode(\'.\', $path);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $arr[count($arr)-1];&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//方法五&lt;br /&gt;\r\nfunction ext_name5($path){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $pattern = \'/^[^\\.]+\\.([\\w]+$/\';&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return preg_replace($pattern,\'${1}\',basename($path));&lt;br /&gt;\r\n}&lt;br /&gt;', '', '1', '2016-01-30 15:23:15');
INSERT INTO `problems` VALUES ('241', '写出一下程序的输入结果', '&amp;lt;?php&lt;br /&gt;\r\n$b = 201;&lt;br /&gt;\r\n$c = 40;&lt;br /&gt;\r\n$a = $b &amp;gt; $c ? 4 : 5;&lt;br /&gt;\r\necho $a;&lt;br /&gt;\r\n?&amp;gt;&lt;br /&gt;', '2', '1', '2', '[\"\"]', '4', '', '1', '2016-01-30 15:24:55');
INSERT INTO `problems` VALUES ('242', 'what is the value of $a', '&amp;lt;?php&lt;br /&gt;\r\n$a = in_array(\'01\', array(\'1\')) == var_dump(\'01\' == 1);&lt;br /&gt;\r\n?&amp;gt;&lt;br /&gt;', '1', '1', '2', '[\"True\",\"False\"]', '0', '', '1', '2016-01-30 15:27:06');
INSERT INTO `problems` VALUES ('243', 'what is the value of $result in the following PHP code?', '&amp;lt;?php&lt;br /&gt;\r\nfunction timeTwo($int){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $int = $int * 2;&lt;br /&gt;\r\n}&lt;br /&gt;\r\n$int = 2;&lt;br /&gt;\r\n$result = timesTwo($int);&lt;br /&gt;', '2', '1', '2', '[\"\"]', 'NULL', '', '1', '2016-01-30 15:29:01');
INSERT INTO `problems` VALUES ('244', 'what is the best all-purpose way of comparing two strings', '', '1', '1', '2', '[\"Using the strpos function\",\"Using the ==operator\",\"Using strcasecmp()\",\"Using strcmp()\"]', '2', '', '1', '2016-01-30 15:31:09');
INSERT INTO `problems` VALUES ('245', '运行以下程序，$a的值是什么', '&amp;lt;?php&lt;br /&gt;\r\n$empty = \'\';&lt;br /&gt;\r\n$null = null;&lt;br /&gt;\r\n$bool = FASLE;&lt;br /&gt;\r\n$notSet;&lt;br /&gt;\r\n$array = array();&lt;br /&gt;\r\n$a = &quot;hello&quot;;&lt;br /&gt;\r\n$b = &amp;amp;$a;&lt;br /&gt;\r\nunset($b);&lt;br /&gt;\r\n$b = &quot;world&quot;;&lt;br /&gt;\r\necho $a;&lt;br /&gt;', '3', '1', '2', '[\"\"]', 'hello', '', '1', '2016-01-30 15:33:18');
INSERT INTO `problems` VALUES ('246', '运行以下程序，$b的值是什么', '&amp;lt;?php&lt;br /&gt;\r\n$empty = \'\';&lt;br /&gt;\r\n$null = null;&lt;br /&gt;\r\n$bool = FASLE;&lt;br /&gt;\r\n$notSet;&lt;br /&gt;\r\n$array = array();&lt;br /&gt;\r\n$a = 1;&lt;br /&gt;\r\n$x = &amp;amp;$a;&lt;br /&gt;\r\n$b = $a++;&lt;br /&gt;\r\necho $b;&lt;br /&gt;', '2', '1', '2', '[\"\"]', '1', '', '1', '2016-01-30 15:34:56');
INSERT INTO `problems` VALUES ('247', '运行以下程序，$b的值是什么', '&amp;lt;?php&lt;br /&gt;\r\n$empty = \'\';&lt;br /&gt;\r\n$null = null;&lt;br /&gt;\r\n$bool = FASLE;&lt;br /&gt;\r\n$notSet;&lt;br /&gt;\r\n$array = array();&lt;br /&gt;\r\n$x = empty($array);&lt;br /&gt;\r\necho $x ? &quot;true&quot; : &quot;false&quot;;&lt;br /&gt;', '2', '1', '2', '[\"\"]', 'true', '', '1', '2016-01-30 15:36:55');
INSERT INTO `problems` VALUES ('248', '请写一个函数，实现以下功能：字符串&quot;open_door&quot;转换成&quot;OpenDoor&quot;、&quot;make_by_id&quot;转换成&quot;MakeById&quot;。', '', '3', '1', '2', '[\"\"]', '&amp;lt;?php&lt;br /&gt;\r\nfunction change_str($str){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr = explode(\'_\', $str);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr = array_map(\'ucfirst\',$arr);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return implode(\'\', $arr);&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//测试&lt;br /&gt;\r\n$str1 = &quot;open_door&quot;;&lt;br /&gt;\r\n$str2 = &quot;make_by_id&quot;;&lt;br /&gt;\r\necho change_str($str1);&lt;br /&gt;\r\necho change_str($str2);&lt;br /&gt;', '', '1', '2016-01-30 15:40:44');
INSERT INTO `problems` VALUES ('249', '要求写一段程序，实现一下数组$arr1转换成数组$arr2:', '$arr1 = array(&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; \'0\' =&amp;gt; array(\'fid\' =&amp;gt; 1, \'tid\' =&amp;gt; 1, \'name\' =&amp;gt; \'Name1\' ),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; \'1\' =&amp;gt; array(\'fid\' =&amp;gt; 1, \'tid\' =&amp;gt; 2, \'name\' =&amp;gt; \'Name2\' ),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; \'2\' =&amp;gt; array(\'fid\' =&amp;gt; 1, \'tid\' =&amp;gt; 5, \'name\' =&amp;gt; \'Name3\' ),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; \'3\' =&amp;gt; array(\'fid\' =&amp;gt; 1, \'tid\' =&amp;gt; 7, \'name\' =&amp;gt; \'Name4\' ),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; \'0\' =&amp;gt; array(\'fid\' =&amp;gt; 1, \'tid\' =&amp;gt; 9, \'name\' =&amp;gt; \'Name5\' )&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; );&lt;br /&gt;\r\n$arr2 = array(&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; \'0\' =&amp;gt; array(&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; \'0\' =&amp;gt; array(\'tid\' =&amp;gt; 1,\'name\' =&amp;gt; \'Name1\'),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; \'1\' =&amp;gt; array(\'tid\' =&amp;gt; 2,\'name\' =&amp;gt; \'Name2\'),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; \'2\' =&amp;gt; array(\'tid\' =&amp;gt; 5,\'name\' =&amp;gt; \'Name3\'),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; \'3\' =&amp;gt; array(\'tid\' =&amp;gt; 7,\'name\' =&amp;gt; \'Name4\'),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; \'1\' =&amp;gt; array(&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; \'0\' =&amp;gt; array(\'tid\' =&amp;gt; 9,\'name\' =&amp;gt; \'Name5\')&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; )&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; );&lt;br /&gt;', '3', '1', '2', '[\"\"]', '$arr_temp = array();&lt;br /&gt;\r\n$arr2 = array();&lt;br /&gt;\r\nforeach($arr1 as $v){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //方法一&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr__temp[$v[\'fid\']][] = array_slice($v, 1);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //方法二&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //$arr_temp[$v[\'fid\']][] = array(&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; // &amp;nbsp;\'tid\'=&amp;gt;?$v[\'tid\'],&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; // &amp;nbsp;\'name\'=&amp;gt;$v[\'name\']&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //);&lt;br /&gt;\r\n}&lt;br /&gt;\r\nforeach($arr__temp as $v){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; # code...&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr2[] = $v;&lt;br /&gt;\r\n}&lt;br /&gt;', '', '1', '2016-02-01 09:37:58');
INSERT INTO `problems` VALUES ('250', '$val = max(\'string\',array(2,5,7),42);$val值为', '', '3', '1', '2', '[\"\"]', 'array(2,5,7)', '&lt;p&gt;\r\n	max用法示例如下：\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	echo max(1,3,5,6,7);//7&lt;br /&gt;\r\necho max(array(2,4,5));//5&lt;br /&gt;\r\necho max(0, \'hello\');//0&lt;br /&gt;\r\necho max(\'hello\', 0);//hello&lt;br /&gt;\r\necho max(-1, \'hello\');//hello&lt;br /&gt;\r\n&lt;br /&gt;\r\n//对多个数组，max从左向右比较。&lt;br /&gt;\r\n//因此在本例中：2 == 2， 但4 &amp;lt; 5&lt;br /&gt;\r\n$val = max(array(2, 4, 8),array(2, 5, 7));//array(2, 5, 7)&lt;br /&gt;\r\n&lt;br /&gt;\r\n//如果同时给出数组和非数组作为参数，则总是将数组视为&lt;br /&gt;\r\n//最大值返回&lt;br /&gt;\r\n$val = max(\'string\', array(2, 5, 7), 42); //array(2, 5, 7)&lt;br /&gt;\r\n&lt;/p&gt;', '1', '2016-02-01 11:03:37');
INSERT INTO `problems` VALUES ('251', '写出如下程序的输出结果', '$str1 = null;&lt;br /&gt;\r\n$str2 = false;&lt;br /&gt;\r\necho $str1 == $str2?\'相等\':\'不相等\';&lt;br /&gt;\r\n&lt;br /&gt;\r\n&lt;br /&gt;\r\n$str3 = \'\'&lt;br /&gt;\r\n$str4 = 0;&lt;br /&gt;\r\necho $str3 == $str4 ? \'相等\' : \'不相等\';&lt;br /&gt;\r\n&lt;br /&gt;\r\n$str5 = 0;&lt;br /&gt;\r\n$str6 = \'0\';&lt;br /&gt;\r\necho $str5 == $str6 ? \'相等\' : \'不相等\';&lt;br /&gt;', '3', '1', '2', '[\"\"]', '相等相等不相等', '', '1', '2016-02-01 11:09:18');
INSERT INTO `problems` VALUES ('252', '写出如下程序的输出结果', '$a1 = null;&lt;br /&gt;\r\n$a2 = false;&lt;br /&gt;\r\n$a3 = 0;&lt;br /&gt;\r\n$a4 = \'\';&lt;br /&gt;\r\n$a5 = \'0\';&lt;br /&gt;\r\n$a6 = \'null\';&lt;br /&gt;\r\n$a7 = array();&lt;br /&gt;\r\n$a8 = array(array());&lt;br /&gt;\r\n&lt;br /&gt;\r\necho empty($a1) ? \'true\' : \'false\';&lt;br /&gt;\r\necho empty($a2) ? \'true\' : \'false\';&lt;br /&gt;\r\necho empty($a3) ? \'true\' : \'false\';&lt;br /&gt;\r\necho empty($a4) ? \'true\' : \'false\';&lt;br /&gt;\r\necho empty($a5) ? \'true\' : \'false\';&lt;br /&gt;\r\necho empty($a6) ? \'true\' : \'false\';&lt;br /&gt;\r\necho empty($a7) ? \'true\' : \'false\';&lt;br /&gt;\r\necho empty($a8) ? \'true\' : \'false\';&lt;br /&gt;', '3', '1', '2', '[\"\"]', 'ture ture ture ture ture false ture false&lt;br /&gt;', '', '1', '2016-02-01 11:14:39');
INSERT INTO `problems` VALUES ('253', '写出如下程序的输出结果', '$test = \'aaaaaa\';&lt;br /&gt;\r\n$abc = &amp;amp;$test;&lt;br /&gt;\r\nunset($test);&lt;br /&gt;\r\necho $abc;&lt;br /&gt;', '2', '1', '2', '[\"\"]', 'aaaaaa', '', '1', '2016-02-01 11:16:08');
INSERT INTO `problems` VALUES ('254', '写出如下程序的输出结果', '$count = 5;&lt;br /&gt;\r\nfunction get_count(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; static $count = 0;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $count++;&lt;br /&gt;\r\n}&lt;br /&gt;\r\necho $count;&lt;br /&gt;\r\n++$count;&lt;br /&gt;\r\necho get_count();&lt;br /&gt;\r\necho get_count();&lt;br /&gt;', '3', '3', '2', '[\"\"]', '5 0 1', '在PHP中，作用域是不重叠的，函数之外的是全局变量，函数内部定义的则是局部变量，二者是两个不同的变量，除非函数内使用global显式声明使用全局变量或直接用$_GLOBALS来引用', '1', '2016-02-01 11:17:55');
INSERT INTO `problems` VALUES ('255', '写出如下程序的输出结果', '$GLOBALS[\'var1\'] = 5;&lt;br /&gt;\r\n$var2 = 1;&lt;br /&gt;\r\nfunction get_value(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; global $var2;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $var1 = 0;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $var2++;&lt;br /&gt;\r\n}&lt;br /&gt;\r\nget_value();&lt;br /&gt;\r\necho $var1;&lt;br /&gt;\r\necho $var2;&lt;br /&gt;', '3', '1', '2', '[\"\"]', '5 2', '', '1', '2016-02-01 11:22:50');
INSERT INTO `problems` VALUES ('256', '写出如下程序的输出结果', 'function get_arr($arr){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; unset($arr[0]);&lt;br /&gt;\r\n}&lt;br /&gt;\r\n$arr1 = array(1, 2);&lt;br /&gt;\r\n$arr2 = array(1, 2);&lt;br /&gt;\r\nget_arr(&amp;amp;$arr1);&lt;br /&gt;\r\nget_arr($arr2);&lt;br /&gt;\r\necho count($arr1);&lt;br /&gt;\r\necho count($arr2);&lt;br /&gt;', '3', '1', '2', '[\"\"]', '1 2', '', '1', '2016-02-01 11:25:55');
INSERT INTO `problems` VALUES ('257', '若$aa = \'aa\';则print(\'aa is \\\'aa\\\'\'.&quot;&lt;br/&gt;&quot;)会输出什么', '', '2', '1', '2', '[\"\"]', 'aa is \'aa\'', '', '1', '2016-02-01 11:27:25');
INSERT INTO `problems` VALUES ('258', '以下代码的执行后是，$result值为:', '$srcArray = array(\'a\', \'b\', \'c\', \'d\');&lt;br /&gt;\r\n$randValue = array_rand($srcArray);&lt;br /&gt;\r\n$result = is_string($randValue);&lt;br /&gt;', '1', '1', '2', '[\"a\",\"false\",\"true\",\"b\",\"c\"]', '1', '', '1', '2016-02-01 11:30:04');
INSERT INTO `problems` VALUES ('260', '以下代码执行后，$result的值', '$x = \'\';&lt;br /&gt;\r\n$result = is_null();&lt;br /&gt;', '1', '1', '2', '[\"null\",\"true\",\"false\",\"1\"]', '2', '答案选C', '1', '2016-02-01 13:57:55');
INSERT INTO `problems` VALUES ('261', '翻转字符串中的单词，字符串仅包含大小写字母和空格，单词间使用空格分割。如：输入&quot;This is PHP&quot;,输出&quot;PHP is This&quot;(非必要请不要使用PHP自带函数)', '', '3', '1', '2', '[\"\"]', 'function reverse($str){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr = explode(\' \', $str);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr = array_reverse($arr);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return implode(\' \', $arr);&lt;br /&gt;\r\n}&lt;br /&gt;\r\n&lt;br /&gt;\r\n$str = \'This is PHP\';&lt;br /&gt;\r\necho reverse($str);&lt;br /&gt;', '', '1', '2016-02-01 14:02:22');
INSERT INTO `problems` VALUES ('262', '设有这样一个数组$a=array(array(\'id\'=&gt;0),array(\'id\'=&gt;1),array(\'id\'=&gt;2)....)id=&gt;0-10000,请问你如何使用PHP判断id=&gt;500是否在这个数组内', '', '3', '1', '2', '[\"\"]', '&lt;p&gt;\r\n	使用in_array函数，代码如下：\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	$a = array(&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'id\' =&amp;gt; 0),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'id\' =&amp;gt; 1),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'id\' =&amp;gt; 2),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'id\' =&amp;gt; 500)&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; );&lt;br /&gt;\r\n$b = array(\'id\' =&amp;gt; 500);&lt;br /&gt;\r\nif(in_array($b, $a)){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; echo \'Yes\';&lt;br /&gt;\r\n}else{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; echo \'No\';&lt;br /&gt;\r\n}&lt;br /&gt;\r\n&lt;/p&gt;', '', '1', '2016-02-01 14:11:03');
INSERT INTO `problems` VALUES ('263', '运行以上代码后$a,$b,$c分别是', '$a = $b = $c =0;&lt;br /&gt;\r\n$a = $b &amp;amp;&amp;amp; $c;&lt;br /&gt;', '3', '1', '2', '[\"\"]', '$a为false,$b=$c=0', '', '1', '2016-02-01 14:14:37');
INSERT INTO `problems` VALUES ('264', '设计模式考察:请用单态设计模式方法设计类满足如下需求', '请用PHP5代码编写类实现在每次对数据库链接的访问中都只能获得唯一的一个数据库连接，具体连接数据库的详细代码忽略，请写出主要逻辑代码&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '3', '1', '2', '[\"\"]', 'class Mysql{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; private static $instance = null;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; private $conn;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //构造方法，设置为pirvage,不允许通过new 获得对象&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; private function __construct(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $conn = mysql_connect(\'localhost\',\'root\',\'123456\');&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //获取实例方法&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; public static function getInstance(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(!self::$instance instance self){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; self::instance = new selef;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return self::$instance;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //禁止克隆&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; private funcion __clone(){ }&lt;br /&gt;\r\n}&lt;br /&gt;\r\n&lt;br /&gt;\r\n//获取对象&lt;br /&gt;\r\n$db = Mysql::getInstance();&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '', '1', '2016-02-01 14:43:57');
INSERT INTO `problems` VALUES ('265', '写出下列程序的输出结果', 'class a{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; protected $c;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; public function a(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $this-&amp;gt;c = 10;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\nclass b extends a{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; public function print_data(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return $this-&amp;gt;c;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\n$b = new b();&lt;br /&gt;\r\necho $b-&amp;gt;print_data();&lt;br /&gt;', '3', '1', '2', '[\"\"]', '输出结果为10', '', '1', '2016-02-01 14:49:29');
INSERT INTO `problems` VALUES ('266', '如何使用下面的类，并解释下面什么意思', 'class test{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; function Get_test($num){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $num = md5(md5($num).\'En\');&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return $num;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;', '3', '1', '2', '[\"\"]', '&lt;p&gt;\r\n	双重MD5加密\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	$testObject = new test();\r\n&lt;/p&gt;\r\n$encryption = $testObject-&amp;gt;Get_test(&quot;PHP&quot;);&lt;br /&gt;', '', '1', '2016-02-01 14:59:36');
INSERT INTO `problems` VALUES ('267', 'How do you access and set properties of a class from within the class', '', '3', '1', '2', '[\"\"]', '&lt;p&gt;\r\n	使用语句：$this-&amp;gt;propertyName,例如：\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	class myclass{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; private $propertyName;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; public function __construct(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $this-&amp;gt;propertyName = &quot;value&quot;;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\n&lt;/p&gt;', '', '1', '2016-02-01 15:03:14');
INSERT INTO `problems` VALUES ('268', 'The code below ______because_______', '&amp;lt;?php&lt;br /&gt;\r\nclass foo{&lt;br /&gt;\r\n?&amp;gt;&lt;br /&gt;\r\n&amp;lt;?php&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; function bar(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print &quot;bar&quot;;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\n?&amp;gt;&lt;br /&gt;', '1', '3', '2', '[\"will work,class definitions can be split up into multiple PHP blocks.\",\"will not work,class definitions must be in a single PHP block.\",\"will not work,class definitions must be in a single file but can be in multiple PHP blocks.\",\"will work,class definitions can be split up into multiple files and multiple PHP blocks.\"]', '1', '', '1', '2016-02-01 15:09:52');
INSERT INTO `problems` VALUES ('269', '在PHP中，如果派生类与父类有相同名字的函数，则派生类的函数会替换父类的函数。程序结果为', '&amp;lt;?php&lt;br /&gt;\r\nclass A{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; function disName(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo &quot;Picachu&quot;;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\nclass B extends A{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; var $tmp;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; function disName(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo &quot;Dorraemon&quot;;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\n$cartoon = new B;&lt;br /&gt;\r\n$cartoon-&amp;gt;disName();&lt;br /&gt;', '1', '1', '2', '[\"tmp\",\"Picachu\",\"disName\",\"doraemon\",\"\\u65e0\\u8f93\\u51fa\"]', '3', '答案选D', '1', '2016-02-01 15:14:36');
INSERT INTO `problems` VALUES ('270', '执行以下代码，输出结果是', '&amp;lt;?php&lt;br /&gt;\r\nabstract class a{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; function __construct(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo \'a\';&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\n$a = new a();&lt;br /&gt;\r\n?&amp;gt;&lt;br /&gt;', '1', '1', '2', '[\"a\",\"\\u4e00\\u4e2a\\u9519\\u8bef\\u8b66\\u544a\",\"\\u4e00\\u4e2a\\u81f4\\u547d\\u6027\\u7684\\u9519\\u8bef\",\"\"]', '2', '答案：C因为类a是抽象类，不能被实例化', '1', '2016-02-01 15:18:18');
INSERT INTO `problems` VALUES ('271', '执行以下代码，输出结果是', 'class a{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; function __construct (){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo \'echo class a something\';&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\nclass b extends a{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; function __construct(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo \'echo class b something\'；&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\n$a = new b();&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '1', '1', '2', '[\"echo class a something echo class b something\",\"echo class b something echo class a something\",\"echo class a something\",\"echo class b something\"]', '3', '类b继承紫类a，两个类都定义了构造函数，由于二者名字相同，所以子类中的构造函数覆盖了父类的构造函数，要想子类对象实例化时也执行父类的构造函数，需要在子类构造函数中使用parent::__construct()来显示调用父类构造。&lt;br /&gt;', '1', '2016-02-01 15:24:14');
INSERT INTO `problems` VALUES ('272', '请定义一个名为MyClass的类，这个类只有一个静态方法justDoIt', '', '3', '1', '2', '[\"\"]', 'class MyClass{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; public static function justDoIt(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;', '', '1', '2016-02-01 15:26:55');
INSERT INTO `problems` VALUES ('273', '写出一个能创建多级目录的PHP函数', '', '3', '1', '2', '[\"\"]', '/**&lt;br /&gt;\r\n&amp;nbsp;* 创建多级目录&lt;br /&gt;\r\n&amp;nbsp;* @param &amp;nbsp;$path &amp;nbsp;string 要创建的目录&lt;br /&gt;\r\n&amp;nbsp;* @param &amp;nbsp;$mode &amp;nbsp;int 创建目录的模式，在windows下忽略&lt;br /&gt;\r\n&amp;nbsp;*/&lt;br /&gt;\r\nfunction create_dir($path,$mode = 0777){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if(is_dir($path)){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; #如果目录已经存在，则不创建&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo \'该目录已经存在\';&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }else{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; #不存在，创建&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(mkdir($path,$mode,true)){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo \'创建目录成功\';&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }else{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo \'创建目录失败\';&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;', '', '1', '2016-02-01 15:32:55');
INSERT INTO `problems` VALUES ('274', '请写一段PHP代码，确保多个进程同时写入同一个文件成功', '&amp;nbsp;核心思路：加锁', '3', '1', '2', '[\"\"]', '$fp = fopen(\'lock.txt\',&quot;w+&quot;);&lt;br /&gt;\r\nif(flock($fp, LOCK_EX)){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //获得写锁，写数据&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; fwrite($fp,&quot;write something&quot;);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //解除锁定&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; flock($fp,LOCKE_UN);&lt;br /&gt;\r\n}else{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; echo &quot;file is locking.....&quot;;&lt;br /&gt;\r\n}&lt;br /&gt;\r\nfclose($fp);&lt;br /&gt;', '', '1', '2016-02-01 15:39:20');
INSERT INTO `problems` VALUES ('275', '写一个函数，尽可能高效的，从一个标准url里取出文件的拓展名，例如：http://www.sina.com.cn/abc/de/fg.php?id=1需要取出php或者.php', '', '3', '3', '2', '[\"\"]', '&lt;p&gt;\r\n	参考方案1：\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	function getExt($url){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr = parse_url($url);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $file = basename($arr[\'path\']);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $ext = explode(\'.\', $file);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $ext[count($ext)-1];&lt;br /&gt;\r\n}&lt;br /&gt;\r\n$path = \'http://www.sina.com.cn/abc/de/fg.php?id=1\';&lt;br /&gt;\r\necho getExt($path);\r\n&lt;/p&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;\r\n参考方案2：\r\n&lt;p&gt;\r\n	&lt;br /&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	function getExt($url){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $url = basename($url);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $pos1 = strpos($url, \'.\');&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $pos2 = strpos($url,\'?\');&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if(strstr($url, \'?\')){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return substr($url, $pos1+1, $pos2-$pos1-1);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }else{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return substr($url, $pos1);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}\r\n&lt;/p&gt;', '', '1', '2016-02-01 15:55:08');
INSERT INTO `problems` VALUES ('276', '写一个函数，能够遍历一个文件夹下的所有文件和子文件夹', '', '3', '1', '2', '[\"\"]', 'function my_scandir($dir){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $files = array();&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if(is_dir($dir())){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if($handle = opendir($dir)){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; while(($file = readdir($handle)) !== false){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if($file!=&quot;.&quot;&amp;amp;&amp;amp;$file!=&quot;..&quot;){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(is_dir($dir.&quot;/&quot;.$file)){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $files[$file] = my_scandir($dir.&quot;/&quot;.$file);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }else{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $files[] = $dir.&quot;/&quot;.$file;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; closedir($handle);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return $file;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;', '', '1', '2016-02-01 16:01:04');
INSERT INTO `problems` VALUES ('277', '简述论坛中无限分类的实现原理。', '&lt;p&gt;\r\n	创建类别表如下：\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	create table category(&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; cat_id smallint unsigned not null auto_increment primary key comment \'类别ID\',&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; cat_name varchar(30) not null default \'\' comment \'类别名称\',&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; parent_id smallint unsigned not null default 0 comment \'类别父ID\'&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; )engine=MyISAM chartset=utf8;&lt;br /&gt;\r\n&lt;span style=&quot;line-height:1.5;&quot;&gt;编写一个函数，递归遍历，实现无限分类&lt;/span&gt; \r\n&lt;/p&gt;', '3', '3', '2', '[\"\"]', 'function tree ($arr, $pid=0,$level=0){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; static $list = array();&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; foreach($arr as $v){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //如果是顶级分类，则将其存到$list中，&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //并以此节点作为根节点，遍历找其子节点&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if($v[\'paren_id\'] == $pid){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $v[\'level\'] = $level;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $list[] = $v;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tree($arr,$v[\'cat_id\'],$level+1);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $list;&lt;br /&gt;\r\n}&lt;br /&gt;', '', '1', '2016-02-01 16:09:26');
INSERT INTO `problems` VALUES ('278', '写一个函数，算出两个文件的相对路径，如$a = \'/a/b/c/e.php\';$b=\'/a/b/12/34/c.php\'; 计算出$b相对于$a的相对路径应该是../../cd/d', '', '3', '1', '1', '[\"\"]', 'function relative_path($path1,$path2){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr1 = explode(\'/\', dirname($path1));&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr2 = explode(\'/\', dirname($path2));&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; for($i = 0, $len = count($arr2);$i&amp;lt;$len;$i++){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if($arr1[$i] != $arr2[$i]){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if($i == 1){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $return_path = array();&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if($i != 1 &amp;amp;&amp;amp; $i &amp;lt; $len){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $return_path = array_fill(0, $len-$i, &quot;..&quot;);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if($i == $len){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $return_path = array(\'./\');&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $return_path array_merge($return_path, array_slice($arr1, $i));&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return implode(\'/\', $return_path);&lt;br /&gt;\r\n}&lt;br /&gt;\r\n$a = \'/a/b/c/d/e.php\';&lt;br /&gt;\r\n$b = \'/a/b/12/34/c.php\';&lt;br /&gt;\r\n$c = \'/e/b/c/d/f.php\';&lt;br /&gt;\r\n$d = \'/a/b/c/d/g.php\';&lt;br /&gt;\r\necho relative_path($a, $b);//结果 ../../c/d&lt;br /&gt;\r\necho relative_path($a, $c);//结果 a/b/c/d&lt;br /&gt;\r\necho relative_path($a, $d);//结果 ./&lt;br /&gt;', '', '1', '2016-02-01 16:34:00');
INSERT INTO `problems` VALUES ('279', '写出一个正则表达式，过滤网页上的所有JS/VBS脚本(即把script标记及其内容都去掉)：', '', '3', '1', '2', '[\"\"]', '过滤javascript脚本参考：&lt;br /&gt;\r\n&amp;lt;?php&lt;br /&gt;\r\n$script = &quot;以下内容不显示：&amp;lt;script type=\'text/javascript\'&amp;gt;alert(\'cc\');&amp;lt;/script&amp;gt;&quot;;&lt;br /&gt;\r\n$pattern = \'/&amp;lt;script[^&amp;gt;]*?&amp;gt;.*?&amp;lt;\\/script&amp;gt;/si\';&lt;br /&gt;\r\necho preg_replace($pattern,&quot;替换内容&quot;,$script);&lt;br /&gt;\r\n&lt;div&gt;\r\n	&lt;br /&gt;\r\n&lt;/div&gt;', '', '1', '2016-02-01 16:42:52');
INSERT INTO `problems` VALUES ('280', 'Given a line of text $string,how would you write a regular expression to strip all the HTML tags from it', '', '3', '1', '2', '[\"\"]', '方案一，使用PHP内建函数strip_tags()除去HTML标签&lt;br /&gt;\r\n方案二，自定义函数，如下：&lt;br /&gt;\r\nheader(\'Content-Type:text/html;charset=utf8\');&lt;br /&gt;\r\nfunction strip_html_tags($str){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $pattern = \'/&amp;lt;(&quot;[^&quot;]*&quot;|\\\'[^\\\']\\*\\\'|[^&amp;gt;&quot;\\\'])*&amp;gt;/\';&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return preg_replace($pattern,\'\',$str);&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//实例&lt;br /&gt;\r\n$html = \'&amp;lt;p id=&quot;&quot;&amp;gt;dddddd&amp;lt;br /&amp;gt;dd&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;\';&lt;br /&gt;\r\necho strip_html_tags($html);&lt;br /&gt;\r\n$html = \'&amp;lt;p id=&quot;&amp;gt;&quot;&amp;gt;aaaaa&amp;lt;br /&amp;gt;aa&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;\';&lt;br /&gt;\r\necho strip_html_tags($html);&lt;br /&gt;', '', '1', '2016-02-01 16:55:11');
INSERT INTO `problems` VALUES ('281', 'PHP中如何判断一个字符串是否是合法的日期模式:2007-03-13 13:13:13。要求代码不超过5行。', '', '3', '1', '2', '[\"\"]', 'function checkDateTime($data){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if(date(\'Y-m-d H:i:s\',strtotime($data)) == $data){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return true;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }else{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return false;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//实例&lt;br /&gt;\r\n$date = \'2013-06-01 20:12:56\';&lt;br /&gt;\r\nvar_dump(checkDateTime($date));&lt;br /&gt;\r\n$date = \'2013-03-32 20 20:16:10\';&lt;br /&gt;\r\nvar_dump(checkDateTime($date));&lt;br /&gt;', '', '1', '2016-02-01 17:04:42');
INSERT INTO `problems` VALUES ('282', '编写函数取得上一月的最后一天', '', '3', '1', '2', '[\"\"]', 'date_default_timezone_set(\'PRC\');&lt;br /&gt;\r\nfunction get_last_month_last_day($date = \'\'){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if($date != \'\'){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $time = strtotime($date);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }else{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $time = time();&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $day = date(\'j\',$time);//获取该日期是当前月的第几天&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return date(\'Y-m-d\',strtotime(&quot;-{$day} days&quot;, $time));&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//测试&lt;br /&gt;\r\necho get_last_month_last_day();&lt;br /&gt;\r\necho get_last_month_last_day(\'2013-3-21\');&lt;br /&gt;', '', '1', '2016-02-01 17:08:59');
INSERT INTO `problems` VALUES ('283', '请使用冒泡排序法对以下一组数据进行排序 10 2 36 14 10 25 23 85 99 45', '', '3', '1', '2', '[\"\"]', '//冒泡排序&lt;br /&gt;\r\nfunction bubble_sort(&amp;amp;$arr){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; for($len = count($arr),$i = 0;$i &amp;lt; $len; $i++){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for($j = 1;$j&amp;lt;$len-$i;$j++){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $temp = $arr[$j-1];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $arr[$j-1] = $arr[$j];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $arr[$j] = $temp;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\n$arr = array(10, 2, 36, 14, 10, 25, 23, 85, 99, 45);&lt;br /&gt;\r\nbubble_sort($arr);&lt;br /&gt;\r\nprint_r($arr);&lt;br /&gt;', '', '1', '2016-02-01 17:14:55');
INSERT INTO `problems` VALUES ('284', '一群猴子排成一圈，按1,2,......n依次编号。然后从第1只开始数，数到第m只，把它踢出圈，从它后面再开始数，再数到第m只，在把它踢出去...,如此不停的进行下去，直到最后只剩下一只猴子为止，那只猴子就叫做大王。要求编程模拟此过程，输入m、n，输出最后那个大王的编号。 这是著名的约瑟夫环的问题', '', '3', '1', '5', '[\"\"]', '&lt;p&gt;\r\n	方案一，使用php来模拟这个过程\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	functon king($n,$m){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $monkey = range(1,$n);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $i = 0;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; while(count($monkey)&amp;gt;1){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $i += 0;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $head = array_shift($monkey);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if($i % $m != 0){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //如果不是m的倍数，则把该猴子返回尾部，否则就抛掉，也就是出列了&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; array_push($monkey,$head);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; //剩下的最后一个就是大王了&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $monkey[0];&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//测试&lt;br /&gt;\r\necho king(10, 7);&lt;br /&gt;\r\n	&lt;p&gt;\r\n		&lt;span style=&quot;line-height:1.5;&quot;&gt;&lt;br /&gt;\r\n&lt;/span&gt;\r\n	&lt;/p&gt;\r\n	&lt;p&gt;\r\n		&lt;span style=&quot;line-height:1.5;&quot;&gt;方案二，使用数学方法解决&lt;/span&gt;\r\n	&lt;/p&gt;\r\n	&lt;p&gt;\r\n		&lt;span style=&quot;line-height:1.5;&quot;&gt;functon josephus(){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $r = 0;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; for($i = 2;$i &amp;lt;= $n; $i++){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $r = ($r + $m) % $i;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $r+1;&lt;br /&gt;\r\n}&lt;br /&gt;\r\nprint_r(josephus(10,7));&lt;br /&gt;\r\n&lt;/span&gt;\r\n	&lt;/p&gt;\r\n&lt;/p&gt;', '', '1', '2016-02-01 17:44:46');
INSERT INTO `problems` VALUES ('285', '描述顺序查找和二分查找(也叫做折半查找)算法，顺序查找必须考虑效率，对象可以是一个有序数组', '', '3', '1', '5', '[\"\"]', '/**&lt;br /&gt;\r\n&amp;nbsp;* 顺序查找&lt;br /&gt;\r\n&amp;nbsp;* @param &amp;nbsp; $arr array数组&lt;br /&gt;\r\n&amp;nbsp;* @param &amp;nbsp; $k 要查找的元素&lt;br /&gt;\r\n&amp;nbsp;* @return &amp;nbsp;mixed 成功返回数组下标，失败则返回-1&lt;br /&gt;\r\n&amp;nbsp;*/&lt;br /&gt;\r\nfuncton seq_sch($arr,$k){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; for($i = 0,$n = count($arr);$i &amp;lt; $n; $i++){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if($arr[$i] == $k){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if($i &amp;lt; $n){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return $i;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }else{&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return -1;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n}&lt;br /&gt;\r\n//测试&lt;br /&gt;\r\n$arr1 = array(9,15,34,76,25,5,47,55);&lt;br /&gt;\r\necho seq_sch($arr1,47);//结果为6&lt;br /&gt;\r\n/**&lt;br /&gt;\r\n&amp;nbsp;* 二分查找，要求数组已经排好序&lt;br /&gt;\r\n&amp;nbsp;* @param &amp;nbsp;array $array 数组&lt;br /&gt;\r\n&amp;nbsp;* @param &amp;nbsp;int $low &amp;nbsp; 数组起始元素下标&lt;br /&gt;\r\n&amp;nbsp;* @param &amp;nbsp;int $high &amp;nbsp;数组末尾元素下标&lt;br /&gt;\r\n&amp;nbsp;* @param &amp;nbsp;$k &amp;nbsp; &amp;nbsp; 要查找的元素&lt;br /&gt;\r\n&amp;nbsp;* @return mixed &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;成功返回数组下标，失败则返回-1&lt;br /&gt;\r\n&amp;nbsp;*/&lt;br /&gt;\r\nfunction bin_sch($array, $low, $high, $k){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if($low &amp;lt;= $high){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $mid = intval(($low + $high)/2));&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if($array[$mid] == $k){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return $mid;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }elseif($k &amp;lt; $array[$mid]){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp', '', '1', '2016-02-01 17:59:53');
INSERT INTO `problems` VALUES ('286', '请用PHP实现一个函数，将一个2进制数的无符号非负电位字符串非浮点字符串转成一个10进制数，返回该10进制。不许使用BIN等系统内置函数', '', '3', '1', '2', '[\"\"]', '&lt;p&gt;\r\n	题目意思有些模糊，题目本意可能是将一个无符号的2进制字符串转成10进制数，如\'10100010\',应该得到10100010的十进制表示162\r\n&lt;/p&gt;\r\n&lt;p&gt;\r\n	function bin2dec($bin){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $temp = strrev($bin);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $result = 0;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; for($i=0,$len = strlen($temp);$i &amp;lt; $len;$i++){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $result += pow(2, $i)*$temp[$i];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; return $result;&lt;br /&gt;\r\n}&lt;br /&gt;\r\n&lt;br /&gt;\r\n$a = \'10100010\';&lt;br /&gt;\r\necho bin2dec($a);\r\n&lt;/p&gt;', '', '1', '2016-02-02 09:27:15');
INSERT INTO `problems` VALUES ('287', '请使用PHP设计一个函数，对学生英语考试得分从高到低排序，输入时所有学生的学号和考试得分，返回排好序的考试得分和对应学生的学号。考试满分为100，得分可能会有小数，由于考试评分要求，小数位只会是0或0.5', '要求：&lt;br /&gt;\r\n请不要使用qsort等系统内置排序函数&lt;br /&gt;\r\n请使用你认为最快最优的方法实现该函数并使排序的性能最高。&lt;br /&gt;', '3', '1', '2', '[\"\"]', '/*快速排序实现*/&lt;br /&gt;\r\nfunction array_sort(&amp;amp;$arr,$left,$right){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; if($left &amp;lt; $high){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; while($low &amp;lt; $high &amp;amp;&amp;amp; $arr[$high][\'score\'] &amp;gt;= $pivot[\'score\']){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $high--;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $arr[$high] = $arr[$high];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; while($low &amp;lt; $high &amp;amp;&amp;amp; $arr[$low][\'score\'] &amp;lt;= $pivot[\'score\']){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $low++;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $arr[$high] = $arr[$low];&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; }&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; $arr[$high] = $pivot;&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array_sort($arr, $left, $low-1);&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array_sort($arr, $low+1,$right);&lt;br /&gt;\r\n}&lt;br /&gt;\r\n$english = array(&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'sid\'=&amp;gt;1, \'score\'=&amp;gt;76),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'sid\'=&amp;gt;2, \'score\'=&amp;gt;73),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'sid\'=&amp;gt;3, \'score\'=&amp;gt;68.5),&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; array(\'sid\'=&amp;gt;4, \'score\'=&amp;gt;82.5)&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; );&lt;br /&gt;\r\n$left = 0;&lt;br /&gt;\r\n$right = count($english)-1;&lt;br /&gt;\r\narray_sort($english,$left,$right);&lt;br /&gt;\r\nprint_r($english);&lt;br /&gt;', '', '1', '2016-02-02 09:48:11');
INSERT INTO `problems` VALUES ('288', '请仅使用一次正则替换，将下面内容', 'private long contract_id&lt;br /&gt;\r\nprivate string contract_number;&lt;br /&gt;\r\nprivate string customer_name;&lt;br /&gt;\r\n替换为&lt;br /&gt;\r\nprivate long contractId;&lt;br /&gt;\r\nprivate string contractNumber;&lt;br /&gt;\r\nprivate string customerName;&lt;br /&gt;', '3', '1', '2', '[\"\"]', '$str = &quot;private long contact_id;&lt;br /&gt;\r\nprivate string contact_number;&lt;br /&gt;\r\nprivate string customer_name;&quot;;&lt;br /&gt;\r\n$pattern =\'/_(\\w)/em\';&lt;br /&gt;\r\n$result = preg_replace($pattern, &quot;strtoupper(\'\\\\1\')&quot;,$str);&lt;br /&gt;\r\necho $result;&lt;br /&gt;', '', '1', '2016-02-02 09:53:33');
INSERT INTO `problems` VALUES ('289', '用正则表达式判断$a是否是一个以半角逗号分割的多个手机号码组成的字符串，是输出yes', '', '3', '1', '2', '[\"\"]', '$pattern = \'/^1[358]\\d{9}(,1[358]\\d{9})*$/\';&lt;br /&gt;\r\n$subject = \'13507224985,13833103237\';&lt;br /&gt;\r\nif(preg_match($pattern, $subject)){&lt;br /&gt;\r\n&amp;nbsp; &amp;nbsp; echo \'yes\';&lt;br /&gt;\r\n}&lt;br /&gt;', '', '1', '2016-02-02 09:58:58');

-- ----------------------------
-- Table structure for solve_pro
-- ----------------------------
DROP TABLE IF EXISTS `solve_pro`;
CREATE TABLE `solve_pro` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `uid` int(10) NOT NULL COMMENT '用户id',
  `pid` int(10) NOT NULL COMMENT '问题编号',
  `is_judge` tinyint(1) DEFAULT NULL COMMENT '是否以判断答案正确与否',
  `is_right` tinyint(1) DEFAULT NULL COMMENT '是否正确:0,错误。1,正确。2.待定',
  `answer` varchar(256) DEFAULT NULL COMMENT '问题答案',
  `ctime` datetime DEFAULT NULL COMMENT '回答时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of solve_pro
-- ----------------------------
INSERT INTO `solve_pro` VALUES ('1', '1', '1', '1', '0', '0', '2015-12-17 15:00:37');
INSERT INTO `solve_pro` VALUES ('2', '1', '2', '1', '0', '2', '2015-12-17 15:03:31');
INSERT INTO `solve_pro` VALUES ('3', '1', '3', '1', '0', '0', '2015-12-17 15:03:50');
INSERT INTO `solve_pro` VALUES ('4', '1', '3', '1', '0', '1', '2015-12-17 15:04:45');
INSERT INTO `solve_pro` VALUES ('5', '1', '3', '1', '0', '1', '2015-12-17 15:05:25');
INSERT INTO `solve_pro` VALUES ('6', '1', '1', '1', '0', '0', '2015-12-17 15:06:18');
INSERT INTO `solve_pro` VALUES ('7', '1', '2', '1', '0', '3', '2015-12-17 15:06:21');
INSERT INTO `solve_pro` VALUES ('8', '1', '3', '1', '0', '3', '2015-12-17 15:06:23');
INSERT INTO `solve_pro` VALUES ('9', '1', '3', '1', '0', '3', '2015-12-17 15:06:23');
INSERT INTO `solve_pro` VALUES ('10', '1', '3', '1', '0', '0', '2015-12-18 14:06:14');
INSERT INTO `solve_pro` VALUES ('11', '1', '1', '1', '0', '0', '2015-12-19 11:15:05');
INSERT INTO `solve_pro` VALUES ('12', '1', '1', '1', '0', '0', '2015-12-19 11:24:49');
INSERT INTO `solve_pro` VALUES ('13', '1', '1', '1', '0', '0', '2015-12-19 11:32:54');
INSERT INTO `solve_pro` VALUES ('14', '1', '1', '1', '0', '0', '2015-12-19 11:34:01');
INSERT INTO `solve_pro` VALUES ('15', '1', '1', '1', '0', '0', '2015-12-19 12:08:11');
INSERT INTO `solve_pro` VALUES ('16', '1', '41', '1', '0', '2', '2016-02-14 15:36:26');
INSERT INTO `solve_pro` VALUES ('17', '1', '4', '1', '0', '0', '2016-02-15 10:04:41');
INSERT INTO `solve_pro` VALUES ('18', '1', '5', '1', '0', '0', '2016-02-15 10:04:45');

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(256) NOT NULL COMMENT '用户名',
  `password` char(64) NOT NULL COMMENT '密码',
  `phone` char(11) NOT NULL COMMENT '手机号码',
  `email` varchar(64) NOT NULL COMMENT '邮箱',
  `ctime` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES ('1', 'chrisdowson', 'e10adc3949ba59abbe56e057f20f883e', '', '', '2015-12-03 16:15:13');
INSERT INTO `users` VALUES ('2', 'chris', '123456', '', '', '2015-12-03 16:15:13');
INSERT INTO `users` VALUES ('3', 'duanxiaoqiang', '123456', '', '', '2015-12-03 16:17:12');
INSERT INTO `users` VALUES ('4', 'okokok', '123456', '', '', '2015-12-08 17:43:58');
